
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package jflexcup;

import java_cup.runtime.*;
import nodes.*;
import java.util.ArrayList;
import visitors.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\144\000\002\002\005\000\002\002\004\000\002\003" +
    "\002\000\002\003\004\000\002\003\004\000\002\004\004" +
    "\000\002\005\005\000\002\005\005\000\002\007\003\000" +
    "\002\007\003\000\002\007\003\000\002\007\003\000\002" +
    "\007\003\000\002\010\003\000\002\010\005\000\002\010" +
    "\005\000\002\010\007\000\002\011\005\000\002\011\007" +
    "\000\002\012\003\000\002\012\003\000\002\012\003\000" +
    "\002\012\003\000\002\012\003\000\002\012\003\000\002" +
    "\012\005\000\002\012\005\000\002\012\005\000\002\012" +
    "\005\000\002\012\005\000\002\012\005\000\002\012\004" +
    "\000\002\012\005\000\002\006\012\000\002\013\006\000" +
    "\002\014\002\000\002\014\003\000\002\015\003\000\002" +
    "\015\005\000\002\016\004\000\002\016\005\000\002\017" +
    "\003\000\002\017\003\000\002\020\002\000\002\020\004" +
    "\000\002\021\002\000\002\021\004\000\002\022\003\000" +
    "\002\022\003\000\002\022\004\000\002\022\004\000\002" +
    "\022\004\000\002\022\003\000\002\022\004\000\002\022" +
    "\005\000\002\022\004\000\002\023\007\000\002\031\002" +
    "\000\002\031\004\000\002\030\006\000\002\024\012\000" +
    "\002\025\005\000\002\025\004\000\002\032\003\000\002" +
    "\032\005\000\002\026\006\000\002\026\006\000\002\027" +
    "\005\000\002\033\006\000\002\033\005\000\002\036\003" +
    "\000\002\036\005\000\002\037\003\000\002\034\003\000" +
    "\002\034\005\000\002\035\003\000\002\035\003\000\002" +
    "\035\003\000\002\035\003\000\002\035\003\000\002\035" +
    "\003\000\002\035\003\000\002\035\003\000\002\035\005" +
    "\000\002\035\005\000\002\035\005\000\002\035\005\000" +
    "\002\035\005\000\002\035\005\000\002\035\005\000\002" +
    "\035\005\000\002\035\005\000\002\035\005\000\002\035" +
    "\005\000\002\035\005\000\002\035\005\000\002\035\005" +
    "\000\002\035\004\000\002\035\004\000\002\035\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\275\000\022\007\013\010\012\011\007\012\017\014" +
    "\016\055\005\056\015\060\uffff\001\002\000\004\061\267" +
    "\001\002\000\006\031\ufff9\061\ufff9\001\002\000\004\002" +
    "\266\001\002\000\006\031\ufff8\061\ufff8\001\002\000\024" +
    "\002\uffff\007\013\010\012\011\007\012\017\014\016\055" +
    "\005\056\015\060\uffff\001\002\000\024\002\uffff\007\013" +
    "\010\012\011\007\012\017\014\016\055\005\056\015\060" +
    "\uffff\001\002\000\006\031\ufff6\061\ufff6\001\002\000\004" +
    "\061\224\001\002\000\004\060\220\001\002\000\006\031" +
    "\ufff7\061\ufff7\001\002\000\004\061\020\001\002\000\006" +
    "\031\ufff5\061\ufff5\001\002\000\004\027\021\001\002\000" +
    "\020\010\012\011\007\012\017\015\026\030\uffde\055\005" +
    "\056\015\001\002\000\004\030\037\001\002\000\004\061" +
    "\030\001\002\000\006\006\uffdc\030\uffdc\001\002\000\006" +
    "\006\034\030\uffdd\001\002\000\014\010\012\011\007\012" +
    "\017\055\005\056\015\001\002\000\004\061\030\001\002" +
    "\000\010\005\uffc2\006\uffc2\030\uffc2\001\002\000\010\005" +
    "\032\006\uffd9\030\uffd9\001\002\000\004\061\033\001\002" +
    "\000\014\005\uffc1\006\uffc1\024\uffc1\030\uffc1\034\uffc1\001" +
    "\002\000\016\010\012\011\007\012\017\015\026\055\005" +
    "\056\015\001\002\000\006\006\uffdb\030\uffdb\001\002\000" +
    "\010\005\032\006\uffda\030\uffda\001\002\000\004\033\040" +
    "\001\002\000\016\010\012\011\007\012\017\013\043\055" +
    "\005\056\015\001\002\000\004\031\044\001\002\000\004" +
    "\031\uffd8\001\002\000\004\031\uffd7\001\002\000\034\007" +
    "\013\010\012\011\007\012\017\016\uffd6\017\uffd6\021\uffd6" +
    "\027\uffd6\032\uffd6\035\uffd6\055\005\056\015\061\uffd6\001" +
    "\002\000\024\002\uffe0\007\uffe0\010\uffe0\011\uffe0\012\uffe0" +
    "\014\uffe0\055\uffe0\056\uffe0\060\uffe0\001\002\000\020\016" +
    "\053\017\056\021\051\027\055\032\uffd4\035\067\061\061" +
    "\001\002\000\034\007\013\010\012\011\007\012\017\016" +
    "\uffd6\017\uffd6\021\uffd6\027\uffd6\032\uffd6\035\uffd6\055\005" +
    "\056\015\061\uffd6\001\002\000\020\016\uffd5\017\uffd5\021" +
    "\uffd5\027\uffd5\032\uffd5\035\uffd5\061\uffd5\001\002\000\026" +
    "\027\077\037\071\054\105\061\101\062\103\063\072\064" +
    "\074\065\104\066\075\067\100\001\002\000\020\016\uffcd" +
    "\017\uffcd\021\uffcd\027\uffcd\032\uffcd\035\uffcd\061\uffcd\001" +
    "\002\000\004\061\206\001\002\000\020\016\uffd2\017\uffd2" +
    "\021\uffd2\027\uffd2\032\uffd2\035\uffd2\061\uffd2\001\002\000" +
    "\026\027\077\037\071\054\105\061\101\062\103\063\072" +
    "\064\074\065\104\066\075\067\100\001\002\000\026\027" +
    "\077\037\071\054\105\061\101\062\103\063\072\064\074" +
    "\065\104\066\075\067\100\001\002\000\004\032\173\001" +
    "\002\000\004\004\172\001\002\000\012\005\uffc2\024\uffc2" +
    "\027\143\034\uffc2\001\002\000\004\004\171\001\002\000" +
    "\010\005\032\024\162\034\163\001\002\000\020\016\053" +
    "\017\056\021\051\027\055\032\uffd4\035\067\061\061\001" +
    "\002\000\004\004\160\001\002\000\004\004\157\001\002" +
    "\000\030\004\076\027\077\037\071\054\105\061\101\062" +
    "\103\063\072\064\074\065\104\066\075\067\100\001\002" +
    "\000\020\016\uffd1\017\uffd1\021\uffd1\027\uffd1\032\uffd1\035" +
    "\uffd1\061\uffd1\001\002\000\026\027\077\037\071\054\105" +
    "\061\101\062\103\063\072\064\074\065\104\066\075\067" +
    "\100\001\002\000\050\004\uffb3\005\uffb3\023\uffb3\030\uffb3" +
    "\036\uffb3\037\uffb3\040\uffb3\041\uffb3\042\uffb3\043\uffb3\044" +
    "\uffb3\045\uffb3\046\uffb3\047\uffb3\050\uffb3\051\uffb3\052\uffb3" +
    "\053\uffb3\057\uffb3\001\002\000\040\004\155\036\114\037" +
    "\107\040\120\041\116\042\111\043\121\044\113\045\122" +
    "\046\123\047\115\050\112\051\117\052\110\053\124\001" +
    "\002\000\050\004\uffb2\005\uffb2\023\uffb2\030\uffb2\036\uffb2" +
    "\037\uffb2\040\uffb2\041\uffb2\042\uffb2\043\uffb2\044\uffb2\045" +
    "\uffb2\046\uffb2\047\uffb2\050\uffb2\051\uffb2\052\uffb2\053\uffb2" +
    "\057\uffb2\001\002\000\050\004\uffb6\005\uffb6\023\uffb6\030" +
    "\uffb6\036\uffb6\037\uffb6\040\uffb6\041\uffb6\042\uffb6\043\uffb6" +
    "\044\uffb6\045\uffb6\046\uffb6\047\uffb6\050\uffb6\051\uffb6\052" +
    "\uffb6\053\uffb6\057\uffb6\001\002\000\020\016\uffca\017\uffca" +
    "\021\uffca\027\uffca\032\uffca\035\uffca\061\uffca\001\002\000" +
    "\026\027\077\037\071\054\105\061\101\062\103\063\072" +
    "\064\074\065\104\066\075\067\100\001\002\000\050\004" +
    "\uffb5\005\uffb5\023\uffb5\030\uffb5\036\uffb5\037\uffb5\040\uffb5" +
    "\041\uffb5\042\uffb5\043\uffb5\044\uffb5\045\uffb5\046\uffb5\047" +
    "\uffb5\050\uffb5\051\uffb5\052\uffb5\053\uffb5\057\uffb5\001\002" +
    "\000\052\004\uffb0\005\uffb0\023\uffb0\027\143\030\uffb0\036" +
    "\uffb0\037\uffb0\040\uffb0\041\uffb0\042\uffb0\043\uffb0\044\uffb0" +
    "\045\uffb0\046\uffb0\047\uffb0\050\uffb0\051\uffb0\052\uffb0\053" +
    "\uffb0\057\uffb0\001\002\000\050\004\uffaf\005\uffaf\023\uffaf" +
    "\030\uffaf\036\uffaf\037\uffaf\040\uffaf\041\uffaf\042\uffaf\043" +
    "\uffaf\044\uffaf\045\uffaf\046\uffaf\047\uffaf\050\uffaf\051\uffaf" +
    "\052\uffaf\053\uffaf\057\uffaf\001\002\000\050\004\uffb4\005" +
    "\uffb4\023\uffb4\030\uffb4\036\uffb4\037\uffb4\040\uffb4\041\uffb4" +
    "\042\uffb4\043\uffb4\044\uffb4\045\uffb4\046\uffb4\047\uffb4\050" +
    "\uffb4\051\uffb4\052\uffb4\053\uffb4\057\uffb4\001\002\000\050" +
    "\004\uffb1\005\uffb1\023\uffb1\030\uffb1\036\uffb1\037\uffb1\040" +
    "\uffb1\041\uffb1\042\uffb1\043\uffb1\044\uffb1\045\uffb1\046\uffb1" +
    "\047\uffb1\050\uffb1\051\uffb1\052\uffb1\053\uffb1\057\uffb1\001" +
    "\002\000\026\027\077\037\071\054\105\061\101\062\103" +
    "\063\072\064\074\065\104\066\075\067\100\001\002\000" +
    "\050\004\uff9f\005\uff9f\023\uff9f\030\uff9f\036\uff9f\037\uff9f" +
    "\040\uff9f\041\uff9f\042\uff9f\043\uff9f\044\uff9f\045\uff9f\046" +
    "\uff9f\047\uff9f\050\uff9f\051\uff9f\052\uff9f\053\uff9f\057\uff9f" +
    "\001\002\000\026\027\077\037\071\054\105\061\101\062" +
    "\103\063\072\064\074\065\104\066\075\067\100\001\002" +
    "\000\026\027\077\037\071\054\105\061\101\062\103\063" +
    "\072\064\074\065\104\066\075\067\100\001\002\000\026" +
    "\027\077\037\071\054\105\061\101\062\103\063\072\064" +
    "\074\065\104\066\075\067\100\001\002\000\026\027\077" +
    "\037\071\054\105\061\101\062\103\063\072\064\074\065" +
    "\104\066\075\067\100\001\002\000\026\027\077\037\071" +
    "\054\105\061\101\062\103\063\072\064\074\065\104\066" +
    "\075\067\100\001\002\000\026\027\077\037\071\054\105" +
    "\061\101\062\103\063\072\064\074\065\104\066\075\067" +
    "\100\001\002\000\026\027\077\037\071\054\105\061\101" +
    "\062\103\063\072\064\074\065\104\066\075\067\100\001" +
    "\002\000\026\027\077\037\071\054\105\061\101\062\103" +
    "\063\072\064\074\065\104\066\075\067\100\001\002\000" +
    "\026\027\077\037\071\054\105\061\101\062\103\063\072" +
    "\064\074\065\104\066\075\067\100\001\002\000\026\027" +
    "\077\037\071\054\105\061\101\062\103\063\072\064\074" +
    "\065\104\066\075\067\100\001\002\000\026\027\077\037" +
    "\071\054\105\061\101\062\103\063\072\064\074\065\104" +
    "\066\075\067\100\001\002\000\026\027\077\037\071\054" +
    "\105\061\101\062\103\063\072\064\074\065\104\066\075" +
    "\067\100\001\002\000\026\027\077\037\071\054\105\061" +
    "\101\062\103\063\072\064\074\065\104\066\075\067\100" +
    "\001\002\000\026\027\077\037\071\054\105\061\101\062" +
    "\103\063\072\064\074\065\104\066\075\067\100\001\002" +
    "\000\050\004\uffa7\005\uffa7\023\uffa7\030\uffa7\036\uffa7\037" +
    "\uffa7\040\uffa7\041\uffa7\042\uffa7\043\uffa7\044\113\045\122" +
    "\046\123\047\115\050\112\051\117\052\uffa7\053\uffa7\057" +
    "\uffa7\001\002\000\050\004\uffa4\005\uffa4\023\uffa4\030\uffa4" +
    "\036\uffa4\037\uffa4\040\uffa4\041\uffa4\042\uffa4\043\uffa4\044" +
    "\uffa4\045\uffa4\046\uffa4\047\uffa4\050\uffa4\051\uffa4\052\uffa4" +
    "\053\uffa4\057\uffa4\001\002\000\050\004\uffa1\005\uffa1\023" +
    "\uffa1\030\uffa1\036\uffa1\037\uffa1\040\uffa1\041\uffa1\042\uffa1" +
    "\043\uffa1\044\uffa1\045\uffa1\046\uffa1\047\uffa1\050\uffa1\051" +
    "\uffa1\052\uffa1\053\uffa1\057\uffa1\001\002\000\050\004\uffa8" +
    "\005\uffa8\023\uffa8\030\uffa8\036\114\037\107\040\120\041" +
    "\116\042\111\043\uffa8\044\113\045\122\046\123\047\115" +
    "\050\112\051\117\052\110\053\124\057\uffa8\001\002\000" +
    "\050\004\uffac\005\uffac\023\uffac\030\uffac\036\uffac\037\uffac" +
    "\040\uffac\041\uffac\042\111\043\uffac\044\113\045\122\046" +
    "\123\047\115\050\112\051\117\052\110\053\124\057\uffac" +
    "\001\002\000\050\004\uffa6\005\uffa6\023\uffa6\030\uffa6\036" +
    "\uffa6\037\uffa6\040\uffa6\041\uffa6\042\uffa6\043\uffa6\044\uffa6" +
    "\045\uffa6\046\uffa6\047\uffa6\050\uffa6\051\uffa6\052\uffa6\053" +
    "\uffa6\057\uffa6\001\002\000\050\004\uffab\005\uffab\023\uffab" +
    "\030\uffab\036\uffab\037\uffab\040\uffab\041\uffab\042\111\043" +
    "\uffab\044\113\045\122\046\123\047\115\050\112\051\117" +
    "\052\110\053\124\057\uffab\001\002\000\050\004\uffa3\005" +
    "\uffa3\023\uffa3\030\uffa3\036\uffa3\037\uffa3\040\uffa3\041\uffa3" +
    "\042\uffa3\043\uffa3\044\uffa3\045\uffa3\046\uffa3\047\uffa3\050" +
    "\uffa3\051\uffa3\052\uffa3\053\uffa3\057\uffa3\001\002\000\050" +
    "\004\uffae\005\uffae\023\uffae\030\uffae\036\uffae\037\uffae\040" +
    "\120\041\116\042\111\043\uffae\044\113\045\122\046\123" +
    "\047\115\050\112\051\117\052\110\053\124\057\uffae\001" +
    "\002\000\050\004\uffa2\005\uffa2\023\uffa2\030\uffa2\036\uffa2" +
    "\037\uffa2\040\uffa2\041\uffa2\042\uffa2\043\uffa2\044\uffa2\045" +
    "\uffa2\046\uffa2\047\uffa2\050\uffa2\051\uffa2\052\uffa2\053\uffa2" +
    "\057\uffa2\001\002\000\050\004\uffa5\005\uffa5\023\uffa5\030" +
    "\uffa5\036\uffa5\037\uffa5\040\uffa5\041\uffa5\042\uffa5\043\uffa5" +
    "\044\uffa5\045\uffa5\046\uffa5\047\uffa5\050\uffa5\051\uffa5\052" +
    "\uffa5\053\uffa5\057\uffa5\001\002\000\050\004\uffa9\005\uffa9" +
    "\023\uffa9\030\uffa9\036\uffa9\037\uffa9\040\uffa9\041\uffa9\042" +
    "\111\043\uffa9\044\113\045\122\046\123\047\115\050\112" +
    "\051\117\052\110\053\124\057\uffa9\001\002\000\050\004" +
    "\uffaa\005\uffaa\023\uffaa\030\uffaa\036\uffaa\037\uffaa\040\uffaa" +
    "\041\uffaa\042\uffaa\043\uffaa\044\113\045\122\046\123\047" +
    "\115\050\112\051\117\052\uffaa\053\uffaa\057\uffaa\001\002" +
    "\000\050\004\uffad\005\uffad\023\uffad\030\uffad\036\uffad\037" +
    "\uffad\040\120\041\116\042\111\043\uffad\044\113\045\122" +
    "\046\123\047\115\050\112\051\117\052\110\053\124\057" +
    "\uffad\001\002\000\030\027\077\030\146\037\071\054\105" +
    "\061\101\062\103\063\072\064\074\065\104\066\075\067" +
    "\100\001\002\000\042\005\uffb9\030\uffb9\036\114\037\107" +
    "\040\120\041\116\042\111\043\121\044\113\045\122\046" +
    "\123\047\115\050\112\051\117\052\110\053\124\001\002" +
    "\000\006\005\151\030\uffbb\001\002\000\050\004\uffbc\005" +
    "\uffbc\023\uffbc\030\uffbc\036\uffbc\037\uffbc\040\uffbc\041\uffbc" +
    "\042\uffbc\043\uffbc\044\uffbc\045\uffbc\046\uffbc\047\uffbc\050" +
    "\uffbc\051\uffbc\052\uffbc\053\uffbc\057\uffbc\001\002\000\004" +
    "\030\150\001\002\000\050\004\uffbd\005\uffbd\023\uffbd\030" +
    "\uffbd\036\uffbd\037\uffbd\040\uffbd\041\uffbd\042\uffbd\043\uffbd" +
    "\044\uffbd\045\uffbd\046\uffbd\047\uffbd\050\uffbd\051\uffbd\052" +
    "\uffbd\053\uffbd\057\uffbd\001\002\000\026\027\077\037\071" +
    "\054\105\061\101\062\103\063\072\064\074\065\104\066" +
    "\075\067\100\001\002\000\004\030\uffba\001\002\000\040" +
    "\030\154\036\114\037\107\040\120\041\116\042\111\043" +
    "\121\044\113\045\122\046\123\047\115\050\112\051\117" +
    "\052\110\053\124\001\002\000\050\004\uff9e\005\uff9e\023" +
    "\uff9e\030\uff9e\036\uff9e\037\uff9e\040\uff9e\041\uff9e\042\uff9e" +
    "\043\uff9e\044\uff9e\045\uff9e\046\uff9e\047\uff9e\050\uff9e\051" +
    "\uff9e\052\uff9e\053\uff9e\057\uff9e\001\002\000\020\016\uffcb" +
    "\017\uffcb\021\uffcb\027\uffcb\032\uffcb\035\uffcb\061\uffcb\001" +
    "\002\000\050\004\uffa0\005\uffa0\023\uffa0\030\uffa0\036\uffa0" +
    "\037\uffa0\040\120\041\116\042\111\043\uffa0\044\113\045" +
    "\122\046\123\047\115\050\112\051\117\052\110\053\124" +
    "\057\uffa0\001\002\000\020\016\uffd0\017\uffd0\021\uffd0\027" +
    "\uffd0\032\uffd0\035\uffd0\061\uffd0\001\002\000\020\016\uffcf" +
    "\017\uffcf\021\uffcf\027\uffcf\032\uffcf\035\uffcf\061\uffcf\001" +
    "\002\000\004\032\uffd3\001\002\000\006\004\uffc3\064\170" +
    "\001\002\000\026\027\077\037\071\054\105\061\101\062" +
    "\103\063\072\064\074\065\104\066\075\067\100\001\002" +
    "\000\044\004\uffb8\005\166\030\uffb8\036\114\037\107\040" +
    "\120\041\116\042\111\043\121\044\113\045\122\046\123" +
    "\047\115\050\112\051\117\052\110\053\124\001\002\000" +
    "\004\004\uffbe\001\002\000\026\027\077\037\071\054\105" +
    "\061\101\062\103\063\072\064\074\065\104\066\075\067" +
    "\100\001\002\000\006\004\uffb7\030\uffb7\001\002\000\004" +
    "\004\uffc4\001\002\000\020\016\uffcc\017\uffcc\021\uffcc\027" +
    "\uffcc\032\uffcc\035\uffcc\061\uffcc\001\002\000\020\016\uffce" +
    "\017\uffce\021\uffce\027\uffce\032\uffce\035\uffce\061\uffce\001" +
    "\002\000\044\002\uffdf\007\uffdf\010\uffdf\011\uffdf\012\uffdf" +
    "\014\uffdf\016\uffdf\017\uffdf\020\uffdf\021\uffdf\027\uffdf\032" +
    "\uffdf\035\uffdf\055\uffdf\056\uffdf\060\uffdf\061\uffdf\001\002" +
    "\000\040\036\114\037\107\040\120\041\116\042\111\043" +
    "\121\044\113\045\122\046\123\047\115\050\112\051\117" +
    "\052\110\053\124\057\175\001\002\000\004\031\044\001" +
    "\002\000\022\016\uffc8\017\uffc8\020\177\021\uffc8\027\uffc8" +
    "\032\uffc8\035\uffc8\061\uffc8\001\002\000\004\031\044\001" +
    "\002\000\020\016\uffc9\017\uffc9\021\uffc9\027\uffc9\032\uffc9" +
    "\035\uffc9\061\uffc9\001\002\000\020\016\uffc7\017\uffc7\021" +
    "\uffc7\027\uffc7\032\uffc7\035\uffc7\061\uffc7\001\002\000\004" +
    "\030\203\001\002\000\006\025\204\026\205\001\002\000" +
    "\004\004\uffc0\001\002\000\004\004\uffbf\001\002\000\004" +
    "\034\207\001\002\000\004\062\210\001\002\000\004\022" +
    "\211\001\002\000\004\062\212\001\002\000\004\023\213" +
    "\001\002\000\004\031\044\001\002\000\020\016\uffc5\017" +
    "\uffc5\021\uffc5\027\uffc5\032\uffc5\035\uffc5\061\uffc5\001\002" +
    "\000\040\023\216\036\114\037\107\040\120\041\116\042" +
    "\111\043\121\044\113\045\122\046\123\047\115\050\112" +
    "\051\117\052\110\053\124\001\002\000\004\031\044\001" +
    "\002\000\020\016\uffc6\017\uffc6\021\uffc6\027\uffc6\032\uffc6" +
    "\035\uffc6\061\uffc6\001\002\000\004\014\016\001\002\000" +
    "\022\002\uffff\007\013\010\012\011\007\012\017\014\016" +
    "\055\005\056\015\001\002\000\004\002\001\001\002\000" +
    "\022\002\ufffc\007\ufffc\010\ufffc\011\ufffc\012\ufffc\014\ufffc" +
    "\055\ufffc\056\ufffc\001\002\000\004\034\262\001\002\000" +
    "\006\004\227\005\226\001\002\000\004\061\230\001\002" +
    "\000\042\002\ufffa\007\ufffa\010\ufffa\011\ufffa\012\ufffa\014" +
    "\ufffa\016\ufffa\017\ufffa\021\ufffa\027\ufffa\032\ufffa\035\ufffa" +
    "\055\ufffa\056\ufffa\060\ufffa\061\ufffa\001\002\000\004\034" +
    "\231\001\002\000\022\027\237\037\232\062\241\063\234" +
    "\064\235\065\242\066\236\067\240\001\002\000\022\027" +
    "\237\037\232\062\241\063\234\064\235\065\242\066\236" +
    "\067\240\001\002\000\022\004\uffef\005\uffef\036\246\037" +
    "\247\040\252\041\250\042\245\043\244\001\002\000\024" +
    "\004\uffed\005\uffed\030\uffed\036\uffed\037\uffed\040\uffed\041" +
    "\uffed\042\uffed\043\uffed\001\002\000\024\004\uffea\005\uffea" +
    "\030\uffea\036\uffea\037\uffea\040\uffea\041\uffea\042\uffea\043" +
    "\uffea\001\002\000\024\004\uffec\005\uffec\030\uffec\036\uffec" +
    "\037\uffec\040\uffec\041\uffec\042\uffec\043\uffec\001\002\000" +
    "\022\027\237\037\232\062\241\063\234\064\235\065\242" +
    "\066\236\067\240\001\002\000\024\004\uffeb\005\uffeb\030" +
    "\uffeb\036\uffeb\037\uffeb\040\uffeb\041\uffeb\042\uffeb\043\uffeb" +
    "\001\002\000\024\004\uffee\005\uffee\030\uffee\036\uffee\037" +
    "\uffee\040\uffee\041\uffee\042\uffee\043\uffee\001\002\000\024" +
    "\004\uffe9\005\uffe9\030\uffe9\036\uffe9\037\uffe9\040\uffe9\041" +
    "\uffe9\042\uffe9\043\uffe9\001\002\000\020\030\251\036\246" +
    "\037\247\040\252\041\250\042\245\043\244\001\002\000" +
    "\022\027\237\037\232\062\241\063\234\064\235\065\242" +
    "\066\236\067\240\001\002\000\022\027\237\037\232\062" +
    "\241\063\234\064\235\065\242\066\236\067\240\001\002" +
    "\000\022\027\237\037\232\062\241\063\234\064\235\065" +
    "\242\066\236\067\240\001\002\000\022\027\237\037\232" +
    "\062\241\063\234\064\235\065\242\066\236\067\240\001" +
    "\002\000\022\027\237\037\232\062\241\063\234\064\235" +
    "\065\242\066\236\067\240\001\002\000\024\004\uffe1\005" +
    "\uffe1\030\uffe1\036\uffe1\037\uffe1\040\uffe1\041\uffe1\042\uffe1" +
    "\043\uffe1\001\002\000\022\027\237\037\232\062\241\063" +
    "\234\064\235\065\242\066\236\067\240\001\002\000\024" +
    "\004\uffe6\005\uffe6\030\uffe6\036\uffe6\037\uffe6\040\uffe6\041" +
    "\uffe6\042\245\043\uffe6\001\002\000\024\004\uffe5\005\uffe5" +
    "\030\uffe5\036\uffe5\037\uffe5\040\uffe5\041\uffe5\042\245\043" +
    "\uffe5\001\002\000\024\004\uffe4\005\uffe4\030\uffe4\036\uffe4" +
    "\037\uffe4\040\252\041\250\042\245\043\uffe4\001\002\000" +
    "\024\004\uffe7\005\uffe7\030\uffe7\036\uffe7\037\uffe7\040\252" +
    "\041\250\042\245\043\uffe7\001\002\000\024\004\uffe8\005" +
    "\uffe8\030\uffe8\036\uffe8\037\uffe8\040\uffe8\041\uffe8\042\245" +
    "\043\uffe8\001\002\000\024\004\uffe3\005\uffe3\030\uffe3\036" +
    "\246\037\247\040\252\041\250\042\245\043\uffe3\001\002" +
    "\000\024\004\uffe2\005\uffe2\030\uffe2\036\uffe2\037\uffe2\040" +
    "\252\041\250\042\245\043\uffe2\001\002\000\022\027\237" +
    "\037\232\062\241\063\234\064\235\065\242\066\236\067" +
    "\240\001\002\000\022\004\ufff0\005\ufff0\036\246\037\247" +
    "\040\252\041\250\042\245\043\244\001\002\000\006\002" +
    "\ufffe\060\ufffe\001\002\000\006\002\ufffd\060\ufffd\001\002" +
    "\000\004\002\000\001\002\000\010\004\ufff4\005\ufff4\034" +
    "\276\001\002\000\006\004\272\005\271\001\002\000\004" +
    "\061\273\001\002\000\042\002\ufffb\007\ufffb\010\ufffb\011" +
    "\ufffb\012\ufffb\014\ufffb\016\ufffb\017\ufffb\021\ufffb\027\ufffb" +
    "\032\ufffb\035\ufffb\055\ufffb\056\ufffb\060\ufffb\061\ufffb\001" +
    "\002\000\010\004\ufff3\005\ufff3\034\274\001\002\000\026" +
    "\027\077\037\071\054\105\061\101\062\103\063\072\064" +
    "\074\065\104\066\075\067\100\001\002\000\042\004\ufff1" +
    "\005\ufff1\036\114\037\107\040\120\041\116\042\111\043" +
    "\121\044\113\045\122\046\123\047\115\050\112\051\117" +
    "\052\110\053\124\001\002\000\026\027\077\037\071\054" +
    "\105\061\101\062\103\063\072\064\074\065\104\066\075" +
    "\067\100\001\002\000\042\004\ufff2\005\ufff2\036\114\037" +
    "\107\040\120\041\116\042\111\043\121\044\113\045\122" +
    "\046\123\047\115\050\112\051\117\052\110\053\124\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\275\000\014\002\005\003\013\005\010\006\007\007" +
    "\003\001\001\000\004\010\267\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\003\264\005" +
    "\010\006\007\007\003\001\001\000\012\003\263\005\010" +
    "\006\007\007\003\001\001\000\002\001\001\000\004\011" +
    "\224\001\001\000\004\004\220\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\012\007\022\014\021\015\024\016\023\001\001\000\002" +
    "\001\001\000\004\032\035\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\007\026\001\001\000\004\032\030" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\007\022\016\034\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\007\041\017\040\001\001\000\004\013\044\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\005\046\007" +
    "\003\020\045\001\001\000\002\001\001\000\026\021\056" +
    "\022\063\023\053\024\067\025\065\026\064\027\057\030" +
    "\051\032\062\033\061\001\001\000\010\005\046\007\003" +
    "\020\047\001\001\000\002\001\001\000\006\033\101\035" +
    "\214\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\033\101\034\201\035\163\001\001\000" +
    "\006\033\101\035\173\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\021\160\022\063\023\053\024\067\025\065" +
    "\026\064\027\057\030\051\032\062\033\061\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\033\101\035\072" +
    "\001\001\000\002\001\001\000\006\033\101\035\155\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\033\101\035" +
    "\152\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\033" +
    "\101\035\105\001\001\000\002\001\001\000\006\033\101" +
    "\035\141\001\001\000\006\033\101\035\140\001\001\000" +
    "\006\033\101\035\137\001\001\000\006\033\101\035\136" +
    "\001\001\000\006\033\101\035\135\001\001\000\006\033" +
    "\101\035\134\001\001\000\006\033\101\035\133\001\001" +
    "\000\006\033\101\035\132\001\001\000\006\033\101\035" +
    "\131\001\001\000\006\033\101\035\130\001\001\000\006" +
    "\033\101\035\127\001\001\000\006\033\101\035\126\001" +
    "\001\000\006\033\101\035\125\001\001\000\006\033\101" +
    "\035\124\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\033\101\035" +
    "\143\036\146\037\144\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\033\101\035\143\036\151\037\144\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\033" +
    "\101\034\164\035\163\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\033\101\034\166\035\163\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\013" +
    "\175\001\001\000\004\031\177\001\001\000\004\013\200" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\213\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\013\216\001" +
    "\001\000\002\001\001\000\004\006\222\001\001\000\012" +
    "\003\221\005\010\006\007\007\003\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\012\232\001\001\000\004\012\260\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\242\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\257\001\001\000\004\012\256\001\001\000\004\012\255" +
    "\001\001\000\004\012\254\001\001\000\004\012\253\001" +
    "\001\000\002\001\001\000\004\012\252\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\262\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\033\101\035\274\001\001\000\002" +
    "\001\001\000\006\033\101\035\276\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$parser$actions {
  private final parser parser;

  /** Constructor */
  CUP$parser$actions(parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$parser$do_action_part00000000(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$parser$result;

      /* select the action based on the action number */
      switch (CUP$parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= DeclList MainFunDecl DeclList 
            {
              ProgramOp RESULT =null;
		int declList1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int declList1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<AbstractSyntaxNode> declList1 = (ArrayList<AbstractSyntaxNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int mainFunDeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int mainFunDeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		IsMainFunOp mainFunDecl = (IsMainFunOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int declList2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int declList2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<AbstractSyntaxNode> declList2 = (ArrayList<AbstractSyntaxNode>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ProgramOp(declList1,mainFunDecl,declList2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Program",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ProgramOp start_val = (ProgramOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = start_val;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$parser$parser.done_parsing();
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // DeclList ::= 
            {
              ArrayList<AbstractSyntaxNode> RESULT =null;
		 RESULT = new ArrayList<AbstractSyntaxNode>(); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclList",1, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // DeclList ::= VarDecl DeclList 
            {
              ArrayList<AbstractSyntaxNode> RESULT =null;
		int varDeclOpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varDeclOpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VarDeclOp varDeclOp = (VarDeclOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int declListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int declListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<AbstractSyntaxNode> declList = (ArrayList<AbstractSyntaxNode>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = declList; declList.add(varDeclOp);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclList",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // DeclList ::= FunDecl DeclList 
            {
              ArrayList<AbstractSyntaxNode> RESULT =null;
		int funDeclOpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int funDeclOpright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		FunOp funDeclOp = (FunOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int declListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int declListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<AbstractSyntaxNode> declList = (ArrayList<AbstractSyntaxNode>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = declList; declList.add(new IsMainFunOp(false,funDeclOp)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("DeclList",1, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // MainFunDecl ::= MAIN FunDecl 
            {
              IsMainFunOp RESULT =null;
		int funDeclOpleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int funDeclOpright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		FunOp funDeclOp = (FunOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		 RESULT = new IsMainFunOp(true,funDeclOp); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("MainFunDecl",2, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // VarDecl ::= Type IdInitList SEMI 
            {
              VarDeclOp RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idInitListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idInitListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<IdInit> idInitList = (ArrayList<IdInit>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new VarDeclOp(type,idInitList);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDecl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // VarDecl ::= VAR IdInitObblList SEMI 
            {
              VarDeclOp RESULT =null;
		int idInitObbListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idInitObbListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<IdInit> idInitObbList = (ArrayList<IdInit>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new VarDeclOp("VAR",idInitObbList);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDecl",3, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // Type ::= INTEGER 
            {
              String RESULT =null;
		RESULT = "INTEGER";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // Type ::= BOOL 
            {
              String RESULT =null;
		RESULT = "BOOL";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // Type ::= REAL 
            {
              String RESULT =null;
		RESULT = "REAL";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // Type ::= STRING 
            {
              String RESULT =null;
		RESULT = "STRING";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Type ::= CHAR 
            {
              String RESULT =null;
		RESULT = "CHAR";
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Type",5, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // IdInitList ::= ID 
            {
              ArrayList<IdInit> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ArrayList<IdInit>() {{ add(new IdInit(new IdExprNode("ID",id),null,null));}}; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdInitList",6, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // IdInitList ::= IdInitList COMMA ID 
            {
              ArrayList<IdInit> RESULT =null;
		int idInitListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idInitListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<IdInit> idInitList = (ArrayList<IdInit>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = idInitList; idInitList.add(new IdInit(new IdExprNode("ID",id),null,null)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdInitList",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // IdInitList ::= ID ASSIGN Expr 
            {
              ArrayList<IdInit> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode expr = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ArrayList<IdInit>() {{ add(new IdInit(new IdExprNode("ID",id),expr,null));}}; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdInitList",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // IdInitList ::= IdInitList COMMA ID ASSIGN Expr 
            {
              ArrayList<IdInit> RESULT =null;
		int idInitListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idInitListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<IdInit> idInitList = (ArrayList<IdInit>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode expr = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = idInitList; idInitList.add(new IdInit(new IdExprNode("ID",id),expr,null)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdInitList",6, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // IdInitObblList ::= ID ASSIGN Const 
            {
              ArrayList<IdInit> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int costanteleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int costanteright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ConstExprNode costante = (ConstExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ArrayList<IdInit>() {{ add(new IdInit(new IdExprNode("ID",id),null,costante));}};
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdInitObblList",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // IdInitObblList ::= IdInitObblList COMMA ID ASSIGN Const 
            {
              ArrayList<IdInit> RESULT =null;
		int idInitObblListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int idInitObblListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<IdInit> idInitObblList = (ArrayList<IdInit>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int costanteleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int costanteright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ConstExprNode costante = (ConstExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = idInitObblList; idInitObblList.add(new IdInit(new IdExprNode("ID",id),null,costante)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdInitObblList",7, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // Const ::= INTEGER_CONST 
            {
              ConstExprNode RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ConstExprNode("INTEGER_CONST",val);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Const ::= REAL_CONST 
            {
              ConstExprNode RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ConstExprNode("REAL_CONST",val);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Const ::= TRUE 
            {
              ConstExprNode RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ConstExprNode("BOOL",val);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Const ::= FALSE 
            {
              ConstExprNode RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ConstExprNode("BOOL",val);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Const ::= STRING_CONST 
            {
              ConstExprNode RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ConstExprNode("STRING_CONST",val);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Const ::= CHAR_CONST 
            {
              ConstExprNode RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		char val = (char)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ConstExprNode("CHAR_CONST",Character.toString(val));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",8, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Const ::= Const POW Const 
            {
              ConstExprNode RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ConstExprNode val1 = (ConstExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ConstExprNode val2 = (ConstExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Double val = Math.pow(Double.valueOf(val1.getConstante()),Double.valueOf(val2.getConstante()));
        int type = TypeChecker.binaryOpChecker("POW",TypeChecker.getInferenceType(val1.getNome()),TypeChecker.getInferenceType(val2.getNome()));
        if(type == sym.INTEGER){
            RESULT = new ConstExprNode("INTEGER_CONST",Integer.valueOf(val.intValue()).toString());
        }
        else{
            RESULT = new ConstExprNode("REAL_CONST",Double.valueOf(val).toString());
        }
                                
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Const ::= Const PLUS Const 
            {
              ConstExprNode RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ConstExprNode val1 = (ConstExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ConstExprNode val2 = (ConstExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Double val = Double.valueOf(val1.getConstante()) + Double.valueOf(val2.getConstante());
        int type = TypeChecker.binaryOpChecker("ARITMETIC",TypeChecker.getInferenceType(val1.getNome()),TypeChecker.getInferenceType(val2.getNome()));
        if(type == sym.INTEGER){
            RESULT = new ConstExprNode("INTEGER_CONST",Integer.valueOf(val.intValue()).toString());
        }
        else{
            RESULT = new ConstExprNode("REAL_CONST",Double.valueOf(val).toString());
        }
                                 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Const ::= Const TIMES Const 
            {
              ConstExprNode RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ConstExprNode val1 = (ConstExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ConstExprNode val2 = (ConstExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
      Double val = Double.valueOf(val1.getConstante()) * Double.valueOf(val2.getConstante());
      int type = TypeChecker.binaryOpChecker("ARITMETIC",TypeChecker.getInferenceType(val1.getNome()),TypeChecker.getInferenceType(val2.getNome()));
      if(type == sym.INTEGER){
          RESULT = new ConstExprNode("INTEGER_CONST",Integer.valueOf(val.intValue()).toString());
      }
      else{
          RESULT = new ConstExprNode("REAL_CONST",Double.valueOf(val).toString());
      }
                                   
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Const ::= Const DIV Const 
            {
              ConstExprNode RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ConstExprNode val1 = (ConstExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ConstExprNode val2 = (ConstExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
      Double val = Double.valueOf(val1.getConstante()) / Double.valueOf(val2.getConstante());
      Double resto = Double.valueOf(val1.getConstante()) % Double.valueOf(val2.getConstante());
      if(resto == 0){
          RESULT = new ConstExprNode("INTEGER_CONST",Integer.valueOf(val.intValue()).toString());
      }
      else{
          RESULT = new ConstExprNode("REAL_CONST",Double.valueOf(val).toString());
      }
    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Const ::= Const MINUS Const 
            {
              ConstExprNode RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ConstExprNode val1 = (ConstExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ConstExprNode val2 = (ConstExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        Double val = Double.valueOf(val1.getConstante()) - Double.valueOf(val2.getConstante());
        int type = TypeChecker.binaryOpChecker("ARITMETIC",TypeChecker.getInferenceType(val1.getNome()),TypeChecker.getInferenceType(val2.getNome()));
        if(type == sym.INTEGER){
            RESULT = new ConstExprNode("INTEGER_CONST",Integer.valueOf(val.intValue()).toString());
        }
        else{
            RESULT = new ConstExprNode("REAL_CONST",Double.valueOf(val).toString());
        }
     
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Const ::= Const STR_CONCAT Const 
            {
              ConstExprNode RESULT =null;
		int val1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int val1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ConstExprNode val1 = (ConstExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int val2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int val2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ConstExprNode val2 = (ConstExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        if(TypeChecker.binaryOpChecker(TypeChecker.STRINGCONCAT,TypeChecker.getInferenceType(val1.getNome()),TypeChecker.getInferenceType(val2.getNome()))==sym.STRING){
            String val = val1.getConstante() + val2.getConstante();
            RESULT = new ConstExprNode("STRING_CONST",val);
        }
                                        
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Const ::= MINUS Const 
            {
              ConstExprNode RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ConstExprNode c = (ConstExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		
        int type = TypeChecker.unaryOpChecker(TypeChecker.UMINUSOP,TypeChecker.getInferenceType(c.getNome()));
        Double val = Double.valueOf(c.getConstante());
        val = val * (-1);
        if(type == sym.INTEGER){
            RESULT = new ConstExprNode("INTEGER_CONST",Integer.valueOf(val.intValue()).toString());
        }
        else{
            RESULT = new ConstExprNode("REAL_CONST",Double.valueOf(val).toString());
        }
                    
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Const ::= LPAR Const RPAR 
            {
              ConstExprNode RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ConstExprNode c = (ConstExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = c;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Const",8, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // FunDecl ::= DEF ID LPAR ParamDeclList RPAR COLON TypeOrVoid Body 
            {
              FunOp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int paramDecListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int paramDecListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		ArrayList<ParDeclOp> paramDecList = (ArrayList<ParDeclOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BodyOp body = (BodyOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new FunOp(new IdExprNode("ID",id),paramDecList,type,body);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunDecl",4, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Body ::= LBRACK VarDeclList StatList RBRACK 
            {
              BodyOp RESULT =null;
		int varDeclListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int varDeclListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<VarDeclOp> varDeclList = (ArrayList<VarDeclOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int statListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int statListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<StatOp> statList = (ArrayList<StatOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new BodyOp(varDeclList,statList);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Body",9, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ParamDeclList ::= 
            {
              ArrayList<ParDeclOp> RESULT =null;
		RESULT = null; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParamDeclList",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ParamDeclList ::= NonEmptyParamDeclList 
            {
              ArrayList<ParDeclOp> RESULT =null;
		int paramDeclListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int paramDeclListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<ParDeclOp> paramDeclList = (ArrayList<ParDeclOp>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = paramDeclList; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParamDeclList",10, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // NonEmptyParamDeclList ::= ParDecl 
            {
              ArrayList<ParDeclOp> RESULT =null;
		int parDeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int parDeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParDeclOp parDecl = (ParDeclOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ArrayList<ParDeclOp>() {{ add(parDecl);}}; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NonEmptyParamDeclList",11, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // NonEmptyParamDeclList ::= NonEmptyParamDeclList PIPE ParDecl 
            {
              ArrayList<ParDeclOp> RESULT =null;
		int paramDeclListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int paramDeclListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<ParDeclOp> paramDeclList = (ArrayList<ParDeclOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int parDeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int parDeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ParDeclOp parDecl = (ParDeclOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = paramDeclList; paramDeclList.add(parDecl); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("NonEmptyParamDeclList",11, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ParDecl ::= Type IdList 
            {
              ParDeclOp RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<IdInit> idList = (ArrayList<IdInit>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ParDeclOp("IN",type,idList); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParDecl",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ParDecl ::= OUT Type IdList 
            {
              ParDeclOp RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int idListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<IdInit> idList = (ArrayList<IdInit>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ParDeclOp("OUT",type,idList); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ParDecl",12, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // TypeOrVoid ::= Type 
            {
              String RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = type; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeOrVoid",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // TypeOrVoid ::= VOID 
            {
              String RESULT =null;
		RESULT = "VOID"; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("TypeOrVoid",13, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // VarDeclList ::= 
            {
              ArrayList<VarDeclOp> RESULT =null;
		RESULT = new ArrayList<VarDeclOp>();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDeclList",14, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // VarDeclList ::= VarDecl VarDeclList 
            {
              ArrayList<VarDeclOp> RESULT =null;
		int varDeclleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int varDeclright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		VarDeclOp varDecl = (VarDeclOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int varDeclListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int varDeclListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<VarDeclOp> varDeclList = (ArrayList<VarDeclOp>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = varDeclList; varDeclList.add(varDecl);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("VarDeclList",14, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // StatList ::= 
            {
              ArrayList<StatOp> RESULT =null;
		RESULT = new ArrayList<StatOp>();
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StatList",15, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // StatList ::= Stat StatList 
            {
              ArrayList<StatOp> RESULT =null;
		int statleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int statright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		StatOp stat = (StatOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int statListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int statListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<StatOp> statList = (ArrayList<StatOp>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = statList; statList.add(stat);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("StatList",15, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // Stat ::= IfStat 
            {
              StatOp RESULT =null;
		int ifStatleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int ifStatright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		IfStatOp ifStat = (IfStatOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = ifStat;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // Stat ::= ForStat 
            {
              StatOp RESULT =null;
		int forStatleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int forStatright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ForStatOp forStat = (ForStatOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = forStat;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // Stat ::= ReadStat SEMI 
            {
              StatOp RESULT =null;
		int readStatleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int readStatright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ReadOp readStat = (ReadOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = readStat;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // Stat ::= WriteStat SEMI 
            {
              StatOp RESULT =null;
		int writeStatleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int writeStatright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		WriteOp writeStat = (WriteOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = writeStat;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // Stat ::= AssignStat SEMI 
            {
              StatOp RESULT =null;
		int assignStatleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int assignStatright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		AssignOp assignStat = (AssignOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = assignStat;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // Stat ::= WhileStat 
            {
              StatOp RESULT =null;
		int whileStatleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int whileStatright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		WhileOp whileStat = (WhileOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = whileStat;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",16, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Stat ::= FunCall SEMI 
            {
              StatOp RESULT =null;
		int funCallleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int funCallright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		CallFunOp funCall = (CallFunOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = funCall;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Stat ::= RETURN Expr SEMI 
            {
              StatOp RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExprNode expr = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new ReturnStatOp("RETURN",expr);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Stat ::= RETURN SEMI 
            {
              StatOp RESULT =null;
		RESULT = null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Stat",16, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // IfStat ::= IF Expr THEN Body Else 
            {
              IfStatOp RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		ExprNode expr = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		BodyOp body = (BodyOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		int elseBodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int elseBodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BodyOp elseBody = (BodyOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new IfStatOp("IF",expr,body,elseBody);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IfStat",17, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Else ::= 
            {
              BodyOp RESULT =null;
		RESULT = null;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Else",23, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Else ::= ELSE Body 
            {
              BodyOp RESULT =null;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BodyOp body = (BodyOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = body;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Else",23, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // WhileStat ::= WHILE Expr LOOP Body 
            {
              WhileOp RESULT =null;
		int Exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int Exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprNode Expr = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BodyOp body = (BodyOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new WhileOp("WHILE",Expr,body);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WhileStat",22, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ForStat ::= FOR ID ASSIGN INTEGER_CONST TO INTEGER_CONST LOOP Body 
            {
              ForStatOp RESULT =null;
		int indexleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).left;
		int indexright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-6)).right;
		String index = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-6)).value;
		int const1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).left;
		int const1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-4)).right;
		String const1 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-4)).value;
		int const2left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int const2right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String const2 = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		BodyOp body = (BodyOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ForStatOp("FOR",new IdExprNode("ID",index),new ConstExprNode("INTEGER_CONST",const1),new ConstExprNode("INTEGER_CONST",const2),body);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ForStat",18, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-7)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ReadStat ::= IdList READ STRING_CONST 
            {
              ReadOp RESULT =null;
		int idListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<IdInit> idList = (ArrayList<IdInit>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int stringConstleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int stringConstright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String stringConst = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ReadOp("READ",idList,new ConstExprNode("STRING_CONST",stringConst));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ReadStat",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // ReadStat ::= IdList READ 
            {
              ReadOp RESULT =null;
		int idListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<IdInit> idList = (ArrayList<IdInit>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new ReadOp("READ",idList,null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ReadStat",19, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // IdList ::= ID 
            {
              ArrayList<IdInit> RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ArrayList<IdInit>() {{ add(new IdInit(new IdExprNode("ID",id),null,null));}}; 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdList",24, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // IdList ::= IdList COMMA ID 
            {
              ArrayList<IdInit> RESULT =null;
		int idListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<IdInit> idList = (ArrayList<IdInit>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = idList; idList.add(new IdInit(new IdExprNode("ID",id),null,null)); 
              CUP$parser$result = parser.getSymbolFactory().newSymbol("IdList",24, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // WriteStat ::= LPAR ExprList RPAR WRITE 
            {
              WriteOp RESULT =null;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<ExprNode> exprList = (ArrayList<ExprNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new WriteOp("WRITE","WRITE",exprList);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WriteStat",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // WriteStat ::= LPAR ExprList RPAR WRITELN 
            {
              WriteOp RESULT =null;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<ExprNode> exprList = (ArrayList<ExprNode>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new WriteOp("WRITE","WRITELN",exprList);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("WriteStat",20, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // AssignStat ::= IdList ASSIGN ExprList 
            {
              AssignOp RESULT =null;
		int idListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ArrayList<IdInit> idList = (ArrayList<IdInit>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<ExprNode> exprList = (ArrayList<ExprNode>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new AssignOp("ASSIGN",idList,exprList);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("AssignStat",21, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // FunCall ::= ID LPAR CallParamList RPAR 
            {
              CallFunOp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-3)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ArrayList<CallParamOp> paramList = (ArrayList<CallParamOp>)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = new CallFunOp("CALLFUN",new IdExprNode("ID",id),paramList);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunCall",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-3)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // FunCall ::= ID LPAR RPAR 
            {
              CallFunOp RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		RESULT = new CallFunOp("CALLFUN",new IdExprNode("ID",id),null);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("FunCall",25, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // CallParamList ::= CallParam 
            {
              ArrayList<CallParamOp> RESULT =null;
		int paramleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CallParamOp param = (CallParamOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ArrayList<CallParamOp>() {{ add(param);}};
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CallParamList",28, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // CallParamList ::= CallParam COMMA CallParamList 
            {
              ArrayList<CallParamOp> RESULT =null;
		int paramleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int paramright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		CallParamOp param = (CallParamOp)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int paramListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int paramListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<CallParamOp> paramList = (ArrayList<CallParamOp>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = paramList; paramList.add(param);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CallParamList",28, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // CallParam ::= Expr 
            {
              CallParamOp RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode expr = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new CallParamOp(expr,false);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("CallParam",29, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // ExprList ::= Expr 
            {
              ArrayList<ExprNode> RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode expr = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ArrayList<ExprNode>() {{ add(expr);}};
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprList",26, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // ExprList ::= Expr COMMA ExprList 
            {
              ArrayList<ExprNode> RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprNode expr = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int exprListleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprListright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ArrayList<ExprNode> exprList = (ArrayList<ExprNode>)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = exprList; exprList.add(expr);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("ExprList",26, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // Expr ::= TRUE 
            {
              ExprNode RESULT =null;
		RESULT = new ConstExprNode("BOOL","true");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // Expr ::= FALSE 
            {
              ExprNode RESULT =null;
		RESULT = new ConstExprNode("BOOL","false");
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // Expr ::= INTEGER_CONST 
            {
              ExprNode RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ConstExprNode("INTEGER_CONST",val);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // Expr ::= REAL_CONST 
            {
              ExprNode RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ConstExprNode("REAL_CONST",val);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // Expr ::= STRING_CONST 
            {
              ExprNode RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String val = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ConstExprNode("STRING_CONST",val);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // Expr ::= CHAR_CONST 
            {
              ExprNode RESULT =null;
		int valleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		char val = (char)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new ConstExprNode("CHAR_CONST",Character.toString(val));
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // Expr ::= ID 
            {
              ExprNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new IdExprNode("ID",id);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // Expr ::= FunCall 
            {
              ExprNode RESULT =null;
		int funCallleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int funCallright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		CallFunOp funCall = (CallFunOp)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = funCall; funCall.setExpr(true);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",27, ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // Expr ::= Expr PLUS Expr 
            {
              ExprNode RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprNode expr1 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode expr2 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new BiExprNode("PLUS",expr1,expr2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // Expr ::= Expr MINUS Expr 
            {
              ExprNode RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprNode expr1 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode expr2 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new BiExprNode("MINUS",expr1,expr2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // Expr ::= Expr TIMES Expr 
            {
              ExprNode RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprNode expr1 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode expr2 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new BiExprNode("TIMES",expr1,expr2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // Expr ::= Expr DIV Expr 
            {
              ExprNode RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprNode expr1 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode expr2 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new BiExprNode("DIV",expr1,expr2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // Expr ::= Expr AND Expr 
            {
              ExprNode RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprNode expr1 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode expr2 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new BiExprNode("AND",expr1,expr2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // Expr ::= Expr POW Expr 
            {
              ExprNode RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprNode expr1 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode expr2 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new BiExprNode("POW",expr1,expr2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // Expr ::= Expr STR_CONCAT Expr 
            {
              ExprNode RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprNode expr1 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode expr2 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new BiExprNode("STR_CONCAT",expr1,expr2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // Expr ::= Expr OR Expr 
            {
              ExprNode RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprNode expr1 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode expr2 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new BiExprNode("OR",expr1,expr2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // Expr ::= Expr GT Expr 
            {
              ExprNode RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprNode expr1 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode expr2 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new BiExprNode("GT",expr1,expr2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // Expr ::= Expr GE Expr 
            {
              ExprNode RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprNode expr1 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode expr2 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new BiExprNode("GE",expr1,expr2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // Expr ::= Expr LT Expr 
            {
              ExprNode RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprNode expr1 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode expr2 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new BiExprNode("LT",expr1,expr2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // Expr ::= Expr LE Expr 
            {
              ExprNode RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprNode expr1 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode expr2 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new BiExprNode("LE",expr1,expr2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // Expr ::= Expr EQ Expr 
            {
              ExprNode RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprNode expr1 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode expr2 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new BiExprNode("EQ",expr1,expr2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // Expr ::= Expr NE Expr 
            {
              ExprNode RESULT =null;
		int expr1left = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).left;
		int expr1right = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)).right;
		ExprNode expr1 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-2)).value;
		int expr2left = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int expr2right = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode expr2 = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new BiExprNode("NE",expr1,expr2);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // Expr ::= MINUS Expr 
            {
              ExprNode RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode expr = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new UnExprNode("MINUS",expr);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // Expr ::= NOT Expr 
            {
              ExprNode RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.peek()).right;
		ExprNode expr = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.peek()).value;
		RESULT = new UnExprNode("NOT",expr);
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // Expr ::= LPAR Expr RPAR 
            {
              ExprNode RESULT =null;
		int exprleft = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).left;
		int exprright = ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-1)).right;
		ExprNode expr = (ExprNode)((java_cup.runtime.Symbol) CUP$parser$stack.elementAt(CUP$parser$top-1)).value;
		RESULT = expr;
              CUP$parser$result = parser.getSymbolFactory().newSymbol("Expr",27, ((java_cup.runtime.Symbol)CUP$parser$stack.elementAt(CUP$parser$top-2)), ((java_cup.runtime.Symbol)CUP$parser$stack.peek()), RESULT);
            }
          return CUP$parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$parser$do_action(
    int                        CUP$parser$act_num,
    java_cup.runtime.lr_parser CUP$parser$parser,
    java.util.Stack            CUP$parser$stack,
    int                        CUP$parser$top)
    throws java.lang.Exception
    {
              return CUP$parser$do_action_part00000000(
                               CUP$parser$act_num,
                               CUP$parser$parser,
                               CUP$parser$stack,
                               CUP$parser$top);
    }
}

}
