/*
 * This file was automatically generated by EvoSuite
 * Mon Jun 05 02:08:30 GMT 2023
 */

package visitors;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Stack;
import nodes.AbstractSyntaxNode;
import nodes.AssignOp;
import nodes.BiExprNode;
import nodes.BodyOp;
import nodes.CallFunOp;
import nodes.CallParamOp;
import nodes.ConstExprNode;
import nodes.ExprNode;
import nodes.ForStatOp;
import nodes.FunOp;
import nodes.IdExprNode;
import nodes.IdInit;
import nodes.IfStatOp;
import nodes.IsMainFunOp;
import nodes.ParDeclOp;
import nodes.ProgramOp;
import nodes.ReadOp;
import nodes.ReturnStatOp;
import nodes.StatOp;
import nodes.UnExprNode;
import nodes.VarDeclOp;
import nodes.WhileOp;
import nodes.WriteOp;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import table.SymbolRecord;
import table.SymbolTable;
import visitors.TypeVisitor;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TypeVisitor_ESTest extends TypeVisitor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TypeVisitor typeVisitor0 = new TypeVisitor();
      ArrayList<VarDeclOp> arrayList0 = new ArrayList<VarDeclOp>();
      BodyOp bodyOp0 = new BodyOp(arrayList0, (ArrayList<StatOp>) null);
      ArrayList<ExprNode> arrayList1 = new ArrayList<ExprNode>();
      WriteOp writeOp0 = new WriteOp("Kp(kb`DOS\"U*M>", "nodes.IdExprNode", arrayList1);
      IfStatOp ifStatOp0 = new IfStatOp("bWb#cr1OVKo5]e_Mo", writeOp0, bodyOp0, bodyOp0);
      UnExprNode unExprNode0 = new UnExprNode(" ", ifStatOp0);
      // Undeclared exception!
      try { 
        unExprNode0.accept(typeVisitor0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Errore: la condizione dell'if deve essere un booleano
         //
         verifyException("visitors.TypeVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TypeVisitor typeVisitor0 = new TypeVisitor();
      ArrayList<IdInit> arrayList0 = new ArrayList<IdInit>();
      ArrayList<ExprNode> arrayList1 = new ArrayList<ExprNode>();
      WriteOp writeOp0 = new WriteOp("Qi'<t4yR`C<|J;H.", "Qi'<t4yR`C<|J;H.", arrayList1);
      arrayList1.add((ExprNode) writeOp0);
      arrayList1.add((ExprNode) writeOp0);
      AssignOp assignOp0 = new AssignOp("TIMES", arrayList0, arrayList1);
      // Undeclared exception!
      try { 
        typeVisitor0.visitAssignOp(assignOp0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // il numero di variabili non coincidono con il numero di espessioni da assegnare
         //
         verifyException("visitors.TypeVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TypeVisitor typeVisitor0 = new TypeVisitor();
      ConstExprNode constExprNode0 = new ConstExprNode("'", "(}NY(X8AlF8AkpOy6");
      BiExprNode biExprNode0 = new BiExprNode("(}NY(X8AlF8AkpOy6", constExprNode0, constExprNode0);
      BiExprNode biExprNode1 = new BiExprNode("AND", constExprNode0, biExprNode0);
      // Undeclared exception!
      try { 
        typeVisitor0.visitBiExprNode(biExprNode1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Operazione non consentita
         //
         verifyException("visitors.TypeChecker", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TypeVisitor typeVisitor0 = new TypeVisitor();
      ConstExprNode constExprNode0 = new ConstExprNode("POW", "NOT");
      BiExprNode biExprNode0 = new BiExprNode("NOT", constExprNode0, constExprNode0);
      BiExprNode biExprNode1 = new BiExprNode("POW", biExprNode0, constExprNode0);
      UnExprNode unExprNode0 = new UnExprNode("NOT", biExprNode1);
      // Undeclared exception!
      try { 
        typeVisitor0.visitUnExprNode(unExprNode0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Il tipo 1 e il tipo 1 sono incompatibili
         //
         verifyException("visitors.TypeChecker", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TypeVisitor typeVisitor0 = new TypeVisitor();
      ArrayList<ExprNode> arrayList0 = new ArrayList<ExprNode>();
      WriteOp writeOp0 = new WriteOp((String) null, (String) null, arrayList0);
      typeVisitor0.visitWriteOp(writeOp0);
      assertEquals(9, (int)writeOp0.getType());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TypeVisitor typeVisitor0 = new TypeVisitor();
      ArrayList<IdInit> arrayList0 = new ArrayList<IdInit>();
      VarDeclOp varDeclOp0 = new VarDeclOp("M;-3", arrayList0);
      typeVisitor0.visitVarDeclOp(varDeclOp0);
      assertEquals("M;-3", varDeclOp0.getVarType());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TypeVisitor typeVisitor0 = new TypeVisitor();
      ExprNode exprNode0 = new ExprNode("");
      UnExprNode unExprNode0 = new UnExprNode("", exprNode0);
      typeVisitor0.visitUnExprNode(unExprNode0);
      assertEquals(1, (int)unExprNode0.getType());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TypeVisitor typeVisitor0 = new TypeVisitor();
      ArrayList<IdInit> arrayList0 = new ArrayList<IdInit>();
      ConstExprNode constExprNode0 = new ConstExprNode((String) null, ");\n");
      ReadOp readOp0 = new ReadOp((String) null, arrayList0, constExprNode0);
      typeVisitor0.visitReadOp(readOp0);
      assertEquals(9, (int)readOp0.getType());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TypeVisitor typeVisitor0 = new TypeVisitor();
      ConstExprNode constExprNode0 = new ConstExprNode("',Q~d`5m3y5Z_I_X3", "7>j b,^y%|n6[fa");
      typeVisitor0.visitConstExprNode(constExprNode0);
      assertEquals(1, (int)constExprNode0.getType());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TypeVisitor typeVisitor0 = new TypeVisitor();
      ConstExprNode constExprNode0 = new ConstExprNode("", (String) null);
      ArrayList<ExprNode> arrayList0 = new ArrayList<ExprNode>();
      WriteOp writeOp0 = new WriteOp((String) null, ">l~ILI-|na|)@?3&j", arrayList0);
      arrayList0.add((ExprNode) constExprNode0);
      ArrayList<StatOp> arrayList1 = new ArrayList<StatOp>();
      BodyOp bodyOp0 = new BodyOp((VarDeclOp) null, arrayList1);
      WhileOp whileOp0 = new WhileOp("nodes.IsMainFunOp", writeOp0, bodyOp0);
      // Undeclared exception!
      try { 
        typeVisitor0.visitWhileOp(whileOp0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Errore: la condizione del while deve essere un booleano
         //
         verifyException("visitors.TypeVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TypeVisitor typeVisitor0 = new TypeVisitor();
      Stack<SymbolTable> stack0 = new Stack<SymbolTable>();
      SymbolTable symbolTable0 = new SymbolTable("<AN|D", "1u");
      stack0.add(symbolTable0);
      typeVisitor0.setActiveStackScope(stack0);
      Stack<SymbolTable> stack1 = typeVisitor0.getActiveStackScope();
      assertFalse(stack1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TypeVisitor typeVisitor0 = new TypeVisitor();
      // Undeclared exception!
      try { 
        typeVisitor0.visitWriteOp((WriteOp) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("visitors.TypeVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TypeVisitor typeVisitor0 = new TypeVisitor();
      // Undeclared exception!
      try { 
        typeVisitor0.visitWhileOp((WhileOp) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("visitors.TypeVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TypeVisitor typeVisitor0 = new TypeVisitor();
      ConstExprNode constExprNode0 = new ConstExprNode("AND", "AND");
      BiExprNode biExprNode0 = new BiExprNode("AND", constExprNode0, constExprNode0);
      ArrayList<StatOp> arrayList0 = new ArrayList<StatOp>();
      IdExprNode idExprNode0 = new IdExprNode("\"bGi", "AND");
      IdInit idInit0 = new IdInit(idExprNode0, constExprNode0, constExprNode0);
      VarDeclOp varDeclOp0 = new VarDeclOp("\"", idInit0);
      BodyOp bodyOp0 = new BodyOp(varDeclOp0, arrayList0);
      WhileOp whileOp0 = new WhileOp((String) null, biExprNode0, bodyOp0);
      // Undeclared exception!
      try { 
        typeVisitor0.visitWhileOp(whileOp0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Operazione non consentita
         //
         verifyException("visitors.TypeChecker", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TypeVisitor typeVisitor0 = new TypeVisitor();
      IdExprNode idExprNode0 = new IdExprNode("C2y>4!AEP?hr84i", "C2y>4!AEP?hr84i");
      ConstExprNode constExprNode0 = new ConstExprNode("3ZS=X_)^NR;x]gx%", ";=wxSPd8_{L+NR-yMv");
      IdInit idInit0 = new IdInit(idExprNode0, idExprNode0, constExprNode0);
      VarDeclOp varDeclOp0 = new VarDeclOp("3ZS=X_)^NR;x]gx%", idInit0);
      // Undeclared exception!
      try { 
        typeVisitor0.visitVarDeclOp(varDeclOp0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Variabile o funzione C2y>4!AEP?hr84i non dichiarata!
         //
         verifyException("visitors.TypeVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TypeVisitor typeVisitor0 = new TypeVisitor();
      // Undeclared exception!
      try { 
        typeVisitor0.visitVarDeclOp((VarDeclOp) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("visitors.TypeVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TypeVisitor typeVisitor0 = new TypeVisitor();
      // Undeclared exception!
      try { 
        typeVisitor0.visitReturnStatOp((ReturnStatOp) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Return statment non valido
         //
         verifyException("visitors.TypeVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TypeVisitor typeVisitor0 = new TypeVisitor();
      ArrayList<IdInit> arrayList0 = new ArrayList<IdInit>();
      IdExprNode idExprNode0 = new IdExprNode("NOT", "MINU");
      ConstExprNode constExprNode0 = new ConstExprNode("MINU", "?y>QF^C");
      IdInit idInit0 = new IdInit(idExprNode0, constExprNode0, constExprNode0);
      arrayList0.add(idInit0);
      ReadOp readOp0 = new ReadOp("?y>QF^C", arrayList0, constExprNode0);
      // Undeclared exception!
      try { 
        typeVisitor0.visitReadOp(readOp0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Variabile o funzione MINU non dichiarata!
         //
         verifyException("visitors.TypeVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TypeVisitor typeVisitor0 = new TypeVisitor();
      // Undeclared exception!
      try { 
        typeVisitor0.visitReadOp((ReadOp) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("visitors.TypeVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TypeVisitor typeVisitor0 = new TypeVisitor();
      // Undeclared exception!
      try { 
        typeVisitor0.visitProgramOp((ProgramOp) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("visitors.TypeVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TypeVisitor typeVisitor0 = new TypeVisitor();
      // Undeclared exception!
      try { 
        typeVisitor0.visitIfStatOp((IfStatOp) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("visitors.TypeVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      TypeVisitor typeVisitor0 = new TypeVisitor();
      IdExprNode idExprNode0 = new IdExprNode("8w", "8w");
      // Undeclared exception!
      try { 
        typeVisitor0.visitIdExprNode(idExprNode0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Variabile o funzione 8w non dichiarata!
         //
         verifyException("visitors.TypeVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TypeVisitor typeVisitor0 = new TypeVisitor();
      // Undeclared exception!
      try { 
        typeVisitor0.visitIdExprNode((IdExprNode) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("visitors.TypeVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TypeVisitor typeVisitor0 = new TypeVisitor();
      IdExprNode idExprNode0 = new IdExprNode("+t", "-{p~n/uj/U@");
      ConstExprNode constExprNode0 = new ConstExprNode("u<_z|Fu", ":{7Xd[");
      ForStatOp forStatOp0 = new ForStatOp("v()^i~TSAj)'9AvXz>", idExprNode0, constExprNode0, constExprNode0, (BodyOp) null);
      SymbolTable symbolTable0 = new SymbolTable("$)ug0I8;");
      forStatOp0.setSymbolTable(symbolTable0);
      // Undeclared exception!
      try { 
        typeVisitor0.visitForStatOp(forStatOp0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Variabile o funzione -{p~n/uj/U@ non dichiarata!
         //
         verifyException("visitors.TypeVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      TypeVisitor typeVisitor0 = new TypeVisitor();
      // Undeclared exception!
      try { 
        typeVisitor0.visitForStatOp((ForStatOp) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("visitors.TypeVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TypeVisitor typeVisitor0 = new TypeVisitor();
      // Undeclared exception!
      try { 
        typeVisitor0.visitConstExprNode((ConstExprNode) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("visitors.TypeVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TypeVisitor typeVisitor0 = new TypeVisitor();
      IdExprNode idExprNode0 = new IdExprNode("OW", "JtC<e~J9sqSn");
      CallFunOp callFunOp0 = new CallFunOp("Km^w4w>',y", idExprNode0, (ArrayList<CallParamOp>) null);
      // Undeclared exception!
      try { 
        typeVisitor0.visitCallFunOp(callFunOp0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Variabile o funzione JtC<e~J9sqSn non dichiarata!
         //
         verifyException("visitors.TypeVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TypeVisitor typeVisitor0 = new TypeVisitor();
      // Undeclared exception!
      try { 
        typeVisitor0.visitCallFunOp((CallFunOp) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("visitors.TypeVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TypeVisitor typeVisitor0 = new TypeVisitor();
      // Undeclared exception!
      try { 
        typeVisitor0.visitBodyOp((BodyOp) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("visitors.TypeVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TypeVisitor typeVisitor0 = new TypeVisitor();
      StatOp statOp0 = new StatOp("7> b,^y%|n6/A[fa");
      ArrayList<ExprNode> arrayList0 = new ArrayList<ExprNode>();
      arrayList0.add((ExprNode) statOp0);
      IdExprNode idExprNode0 = new IdExprNode("g", "q>_SHk!~ V^[A)JHE");
      ConstExprNode constExprNode0 = new ConstExprNode("BOOLEANOP", "s?Et&WXc^SqR");
      IdInit idInit0 = new IdInit(idExprNode0, statOp0, constExprNode0);
      ParDeclOp parDeclOp0 = new ParDeclOp((String) null, "V]%G1wby@5{!W", idInit0);
      ArrayList<IdInit> arrayList1 = parDeclOp0.getIdList();
      AssignOp assignOp0 = new AssignOp("", arrayList1, arrayList0);
      // Undeclared exception!
      try { 
        typeVisitor0.visitAssignOp(assignOp0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Variabile o funzione q>_SHk!~ V^[A)JHE non dichiarata!
         //
         verifyException("visitors.TypeVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TypeVisitor typeVisitor0 = new TypeVisitor();
      // Undeclared exception!
      try { 
        typeVisitor0.visitAssignOp((AssignOp) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("visitors.TypeVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TypeVisitor typeVisitor0 = new TypeVisitor();
      ArrayList<IdInit> arrayList0 = new ArrayList<IdInit>();
      ArrayList<ExprNode> arrayList1 = new ArrayList<ExprNode>();
      IdExprNode idExprNode0 = new IdExprNode(", costante=", "LE");
      ConstExprNode constExprNode0 = new ConstExprNode("LE", "LE");
      IdInit idInit0 = new IdInit(idExprNode0, idExprNode0, constExprNode0);
      arrayList0.add(idInit0);
      AssignOp assignOp0 = new AssignOp("uYO6PuLtN]dZ>", arrayList0, arrayList1);
      // Undeclared exception!
      try { 
        typeVisitor0.visitAssignOp(assignOp0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // il numero di variabili non coincidono con il numero di espessioni da assegnare
         //
         verifyException("visitors.TypeVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TypeVisitor typeVisitor0 = new TypeVisitor();
      // Undeclared exception!
      try { 
        typeVisitor0.getFromScope("fvO");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Variabile o funzione fvO non dichiarata!
         //
         verifyException("visitors.TypeVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TypeVisitor typeVisitor0 = new TypeVisitor();
      ConstExprNode constExprNode0 = new ConstExprNode("zP6e ", "zP6e ");
      BiExprNode biExprNode0 = new BiExprNode("zP6e ", constExprNode0, constExprNode0);
      biExprNode0.setNome("TIMES");
      // Undeclared exception!
      try { 
        typeVisitor0.visitBiExprNode(biExprNode0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Il tipo 1 e il tipo 1 sono incompatibili
         //
         verifyException("visitors.TypeChecker", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TypeVisitor typeVisitor0 = new TypeVisitor();
      StatOp statOp0 = new StatOp("7> b,^y%|n6/A[fa");
      String string0 = typeVisitor0.visit(statOp0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TypeVisitor typeVisitor0 = new TypeVisitor();
      ArrayList<ExprNode> arrayList0 = new ArrayList<ExprNode>();
      WriteOp writeOp0 = new WriteOp("fun", "fun", arrayList0);
      typeVisitor0.visit(writeOp0);
      assertEquals(9, (int)writeOp0.getType());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      TypeVisitor typeVisitor0 = new TypeVisitor();
      StatOp statOp0 = new StatOp("T$");
      UnExprNode unExprNode0 = new UnExprNode("TIMES", statOp0);
      ArrayList<VarDeclOp> arrayList0 = new ArrayList<VarDeclOp>();
      ArrayList<StatOp> arrayList1 = new ArrayList<StatOp>();
      BodyOp bodyOp0 = new BodyOp(arrayList0, arrayList1);
      IfStatOp ifStatOp0 = new IfStatOp(" <evHT_RkD>do0T", unExprNode0, bodyOp0, bodyOp0);
      // Undeclared exception!
      try { 
        typeVisitor0.visit(ifStatOp0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Errore: la condizione dell'if deve essere un booleano
         //
         verifyException("visitors.TypeVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TypeVisitor typeVisitor0 = new TypeVisitor();
      IdExprNode idExprNode0 = new IdExprNode("NOT", "o3N");
      // Undeclared exception!
      try { 
        typeVisitor0.visit(idExprNode0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Variabile o funzione o3N non dichiarata!
         //
         verifyException("visitors.TypeVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      TypeVisitor typeVisitor0 = new TypeVisitor();
      ConstExprNode constExprNode0 = new ConstExprNode("ARITMETIC", "ARITMETIC");
      typeVisitor0.visit(constExprNode0);
      assertEquals(1, (int)constExprNode0.getType());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TypeVisitor typeVisitor0 = new TypeVisitor();
      IdExprNode idExprNode0 = new IdExprNode("Errore: la condizione dell'if deve essere un booleano", "/");
      ArrayList<CallParamOp> arrayList0 = new ArrayList<CallParamOp>();
      CallFunOp callFunOp0 = new CallFunOp("Yms`", idExprNode0, arrayList0);
      // Undeclared exception!
      try { 
        callFunOp0.accept(typeVisitor0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Variabile o funzione / non dichiarata!
         //
         verifyException("visitors.TypeVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TypeVisitor typeVisitor0 = new TypeVisitor();
      ArrayList<StatOp> arrayList0 = new ArrayList<StatOp>();
      BodyOp bodyOp0 = new BodyOp((VarDeclOp) null, arrayList0);
      // Undeclared exception!
      try { 
        typeVisitor0.visit(bodyOp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("visitors.TypeVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TypeVisitor typeVisitor0 = new TypeVisitor();
      IdExprNode idExprNode0 = new IdExprNode("#", ";Zwq");
      ArrayList<StatOp> arrayList0 = new ArrayList<StatOp>();
      BodyOp bodyOp0 = new BodyOp((VarDeclOp) null, arrayList0);
      ArrayList<ParDeclOp> arrayList1 = new ArrayList<ParDeclOp>();
      FunOp funOp0 = new FunOp(idExprNode0, arrayList1, ";Zwq", bodyOp0);
      IsMainFunOp isMainFunOp0 = new IsMainFunOp(true, funOp0);
      // Undeclared exception!
      try { 
        typeVisitor0.visit(isMainFunOp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("visitors.TypeVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TypeVisitor typeVisitor0 = new TypeVisitor();
      ArrayList<IdInit> arrayList0 = new ArrayList<IdInit>();
      VarDeclOp varDeclOp0 = new VarDeclOp("9yagT", arrayList0);
      Object object0 = varDeclOp0.accept(typeVisitor0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TypeVisitor typeVisitor0 = new TypeVisitor();
      ArrayList<IdInit> arrayList0 = new ArrayList<IdInit>();
      IdExprNode idExprNode0 = new IdExprNode("NOT", "NOT");
      ConstExprNode constExprNode0 = new ConstExprNode("NOT", "STR_CONCAT");
      IdInit idInit0 = new IdInit(idExprNode0, idExprNode0, constExprNode0);
      arrayList0.add(idInit0);
      ReadOp readOp0 = new ReadOp("NOT", arrayList0, constExprNode0);
      // Undeclared exception!
      try { 
        typeVisitor0.visit(readOp0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Variabile o funzione NOT non dichiarata!
         //
         verifyException("visitors.TypeVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      TypeVisitor typeVisitor0 = new TypeVisitor();
      ConstExprNode constExprNode0 = new ConstExprNode("@9T", "@9T");
      ArrayList<StatOp> arrayList0 = new ArrayList<StatOp>();
      BodyOp bodyOp0 = new BodyOp((VarDeclOp) null, arrayList0);
      WhileOp whileOp0 = new WhileOp("@9T", constExprNode0, bodyOp0);
      // Undeclared exception!
      try { 
        typeVisitor0.visitWhileOp(whileOp0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Errore: la condizione del while deve essere un booleano
         //
         verifyException("visitors.TypeVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TypeVisitor typeVisitor0 = new TypeVisitor();
      ConstExprNode constExprNode0 = new ConstExprNode("AND", "AND");
      IfStatOp ifStatOp0 = new IfStatOp("Z C+(7", constExprNode0, (BodyOp) null, (BodyOp) null);
      // Undeclared exception!
      try { 
        typeVisitor0.visitIfStatOp(ifStatOp0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Errore: la condizione dell'if deve essere un booleano
         //
         verifyException("visitors.TypeVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TypeVisitor typeVisitor0 = new TypeVisitor();
      StatOp statOp0 = new StatOp("<ANK|D");
      ReturnStatOp returnStatOp0 = new ReturnStatOp("<ANK|D", statOp0);
      // Undeclared exception!
      try { 
        typeVisitor0.visit(returnStatOp0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Return statment non valido
         //
         verifyException("visitors.TypeVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TypeVisitor typeVisitor0 = new TypeVisitor();
      IdExprNode idExprNode0 = new IdExprNode("y=p| ]-&}", "TIMES");
      ArrayList<ParDeclOp> arrayList0 = new ArrayList<ParDeclOp>();
      ArrayList<VarDeclOp> arrayList1 = new ArrayList<VarDeclOp>();
      ArrayList<StatOp> arrayList2 = new ArrayList<StatOp>();
      BodyOp bodyOp0 = new BodyOp(arrayList1, arrayList2);
      FunOp funOp0 = new FunOp(idExprNode0, arrayList0, "y=p| ]-&}", bodyOp0);
      IsMainFunOp isMainFunOp0 = new IsMainFunOp(true, funOp0);
      arrayList2.add((StatOp) null);
      // Undeclared exception!
      try { 
        typeVisitor0.visitFunOp(isMainFunOp0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // valore di ritorno mancante per la funzione TIMES
         //
         verifyException("visitors.TypeVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      TypeVisitor typeVisitor0 = new TypeVisitor();
      ArrayList<IdInit> arrayList0 = new ArrayList<IdInit>();
      VarDeclOp varDeclOp0 = new VarDeclOp("visitors.TypeChecker", arrayList0);
      BodyOp bodyOp0 = new BodyOp(varDeclOp0, (ArrayList<StatOp>) null);
      typeVisitor0.visitBodyOp(bodyOp0);
      assertNull(bodyOp0.getType());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      TypeVisitor typeVisitor0 = new TypeVisitor();
      ArrayList<IdInit> arrayList0 = new ArrayList<IdInit>();
      IdExprNode idExprNode0 = new IdExprNode("NO", "NO");
      ConstExprNode constExprNode0 = new ConstExprNode("NO", "NO");
      IdInit idInit0 = new IdInit(idExprNode0, idExprNode0, constExprNode0);
      arrayList0.add(idInit0);
      ParDeclOp parDeclOp0 = new ParDeclOp("NO", "NO", arrayList0);
      ArrayList<ParDeclOp> arrayList1 = new ArrayList<ParDeclOp>();
      arrayList1.add(parDeclOp0);
      ArrayList<AbstractSyntaxNode> arrayList2 = new ArrayList<AbstractSyntaxNode>();
      FunOp funOp0 = new FunOp(idExprNode0, arrayList1, "NO", (BodyOp) null);
      IsMainFunOp isMainFunOp0 = new IsMainFunOp(true, funOp0);
      ProgramOp programOp0 = new ProgramOp(arrayList2, isMainFunOp0, arrayList2);
      // Undeclared exception!
      try { 
        typeVisitor0.visit(programOp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("visitors.TypeVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      TypeVisitor typeVisitor0 = new TypeVisitor();
      ArrayList<IdInit> arrayList0 = new ArrayList<IdInit>();
      IdExprNode idExprNode0 = new IdExprNode("NO", "NO");
      ParDeclOp parDeclOp0 = new ParDeclOp("NO", "NO", arrayList0);
      ArrayList<ParDeclOp> arrayList1 = new ArrayList<ParDeclOp>();
      arrayList1.add(parDeclOp0);
      ArrayList<AbstractSyntaxNode> arrayList2 = new ArrayList<AbstractSyntaxNode>();
      FunOp funOp0 = new FunOp(idExprNode0, arrayList1, "NO", (BodyOp) null);
      IsMainFunOp isMainFunOp0 = new IsMainFunOp(true, funOp0);
      ProgramOp programOp0 = new ProgramOp(arrayList2, isMainFunOp0, arrayList2);
      // Undeclared exception!
      try { 
        typeVisitor0.visit(programOp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("visitors.TypeVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      TypeVisitor typeVisitor0 = new TypeVisitor();
      ArrayList<AbstractSyntaxNode> arrayList0 = new ArrayList<AbstractSyntaxNode>();
      IdExprNode idExprNode0 = new IdExprNode("REL|P", "REL|P");
      ArrayList<StatOp> arrayList1 = new ArrayList<StatOp>();
      BodyOp bodyOp0 = new BodyOp((ArrayList<VarDeclOp>) null, arrayList1);
      FunOp funOp0 = new FunOp(idExprNode0, (ArrayList<ParDeclOp>) null, "REL|P", bodyOp0);
      IsMainFunOp isMainFunOp0 = new IsMainFunOp(false, funOp0);
      ProgramOp programOp0 = new ProgramOp(arrayList0, isMainFunOp0, arrayList0);
      // Undeclared exception!
      try { 
        typeVisitor0.visitProgramOp(programOp0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // valore di ritorno mancante per la funzione REL|P
         //
         verifyException("visitors.TypeVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      TypeVisitor typeVisitor0 = new TypeVisitor();
      LinkedList<ReadOp> linkedList0 = new LinkedList<ReadOp>();
      ArrayList<AbstractSyntaxNode> arrayList0 = new ArrayList<AbstractSyntaxNode>(linkedList0);
      ProgramOp programOp0 = new ProgramOp(arrayList0, (IsMainFunOp) null, arrayList0);
      ArrayList<IsMainFunOp> arrayList1 = new ArrayList<IsMainFunOp>();
      programOp0.setFunList(arrayList1);
      typeVisitor0.visitProgramOp(programOp0);
      assertEquals(9, (int)programOp0.getType());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      TypeVisitor typeVisitor0 = new TypeVisitor();
      IdExprNode idExprNode0 = new IdExprNode("AND", "AND");
      ArrayList<ParDeclOp> arrayList0 = new ArrayList<ParDeclOp>();
      ArrayList<IdInit> arrayList1 = new ArrayList<IdInit>();
      VarDeclOp varDeclOp0 = new VarDeclOp("_o}U0yZ", arrayList1);
      ArrayList<StatOp> arrayList2 = new ArrayList<StatOp>();
      BodyOp bodyOp0 = new BodyOp(varDeclOp0, arrayList2);
      FunOp funOp0 = new FunOp(idExprNode0, arrayList0, "\"bGi", bodyOp0);
      IsMainFunOp isMainFunOp0 = new IsMainFunOp(false, funOp0);
      ArrayList<AbstractSyntaxNode> arrayList3 = new ArrayList<AbstractSyntaxNode>();
      arrayList3.add((AbstractSyntaxNode) varDeclOp0);
      ProgramOp programOp0 = new ProgramOp(arrayList3, isMainFunOp0, arrayList3);
      // Undeclared exception!
      try { 
        typeVisitor0.visitProgramOp(programOp0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // valore di ritorno mancante per la funzione AND
         //
         verifyException("visitors.TypeVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      TypeVisitor typeVisitor0 = new TypeVisitor();
      ArrayList<IdInit> arrayList0 = new ArrayList<IdInit>();
      ArrayList<ExprNode> arrayList1 = new ArrayList<ExprNode>();
      AssignOp assignOp0 = new AssignOp("EQ", arrayList0, arrayList1);
      String string0 = typeVisitor0.visit(assignOp0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      TypeVisitor typeVisitor0 = new TypeVisitor();
      StatOp statOp0 = new StatOp("7>j b,^y%|n6[fa");
      ArrayList<IdInit> arrayList0 = new ArrayList<IdInit>();
      ArrayList<ExprNode> arrayList1 = new ArrayList<ExprNode>();
      arrayList1.add((ExprNode) statOp0);
      AssignOp assignOp0 = new AssignOp((String) null, arrayList0, arrayList1);
      typeVisitor0.visitAssignOp(assignOp0);
      assertEquals(9, (int)assignOp0.getType());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      TypeVisitor typeVisitor0 = new TypeVisitor();
      Stack<SymbolTable> stack0 = new Stack<SymbolTable>();
      SymbolTable symbolTable0 = new SymbolTable("<AN|D", "<AN|D");
      SymbolRecord symbolRecord0 = new SymbolRecord("", "<AN|D", (-1880522853), false);
      symbolTable0.put("<AN|D", symbolRecord0);
      stack0.add(symbolTable0);
      typeVisitor0.setActiveStackScope(stack0);
      IdExprNode idExprNode0 = new IdExprNode("<AN|D", "<AN|D");
      BiExprNode biExprNode0 = new BiExprNode("<AN|D", idExprNode0, idExprNode0);
      typeVisitor0.visitBiExprNode(biExprNode0);
      assertEquals((-1880522853), (int)idExprNode0.getType());
      assertEquals(1, (int)biExprNode0.getType());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      TypeVisitor typeVisitor0 = new TypeVisitor();
      StatOp statOp0 = new StatOp("MINUS");
      BiExprNode biExprNode0 = new BiExprNode("#W;v_5 nQkLhG{'s", statOp0, statOp0);
      UnExprNode unExprNode0 = new UnExprNode("MINUS", biExprNode0);
      // Undeclared exception!
      try { 
        typeVisitor0.visitUnExprNode(unExprNode0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Operazione UMINUSOP non verificabile 
         //
         verifyException("visitors.TypeChecker", e);
      }
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      TypeVisitor typeVisitor0 = new TypeVisitor();
      ConstExprNode constExprNode0 = new ConstExprNode("Z ", "Cj7");
      UnExprNode unExprNode0 = new UnExprNode("NOT", constExprNode0);
      // Undeclared exception!
      try { 
        typeVisitor0.visitUnExprNode(unExprNode0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Operazione BOOLEANOP non verificabile 
         //
         verifyException("visitors.TypeChecker", e);
      }
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      TypeVisitor typeVisitor0 = new TypeVisitor();
      StatOp statOp0 = new StatOp("<ANK|D");
      BiExprNode biExprNode0 = new BiExprNode("DIV", statOp0, statOp0);
      // Undeclared exception!
      try { 
        typeVisitor0.visitBiExprNode(biExprNode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("visitors.TypeVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      StatOp statOp0 = new StatOp("POW");
      BiExprNode biExprNode0 = new BiExprNode("STR_CONCAT", statOp0, statOp0);
      TypeVisitor typeVisitor0 = new TypeVisitor();
      // Undeclared exception!
      try { 
        typeVisitor0.visitBiExprNode(biExprNode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("visitors.TypeVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      TypeVisitor typeVisitor0 = new TypeVisitor();
      ConstExprNode constExprNode0 = new ConstExprNode(" > ", "G4!~oulM");
      BiExprNode biExprNode0 = new BiExprNode("NE", constExprNode0, constExprNode0);
      // Undeclared exception!
      try { 
        typeVisitor0.visitBiExprNode(biExprNode0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Il tipo 1 e il tipo 1 sono incompatibili
         //
         verifyException("visitors.TypeChecker", e);
      }
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      TypeVisitor typeVisitor0 = new TypeVisitor();
      StatOp statOp0 = new StatOp("pritf(\"\n\";\n");
      BiExprNode biExprNode0 = new BiExprNode("pritf(\"\n\";\n", statOp0, statOp0);
      biExprNode0.setNome("LE");
      // Undeclared exception!
      try { 
        typeVisitor0.visit(biExprNode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("visitors.TypeVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      TypeVisitor typeVisitor0 = new TypeVisitor();
      StatOp statOp0 = new StatOp("<AN|D");
      BiExprNode biExprNode0 = new BiExprNode("LT", statOp0, statOp0);
      // Undeclared exception!
      try { 
        typeVisitor0.visitBiExprNode(biExprNode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("visitors.TypeVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      TypeVisitor typeVisitor0 = new TypeVisitor();
      ConstExprNode constExprNode0 = new ConstExprNode("", "");
      BiExprNode biExprNode0 = new BiExprNode("GT", constExprNode0, constExprNode0);
      // Undeclared exception!
      try { 
        typeVisitor0.visitBiExprNode(biExprNode0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Il tipo 1 e il tipo 1 sono incompatibili
         //
         verifyException("visitors.TypeChecker", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      TypeVisitor typeVisitor0 = new TypeVisitor();
      ConstExprNode constExprNode0 = new ConstExprNode("AND", "AND");
      BiExprNode biExprNode0 = new BiExprNode("EQ", constExprNode0, constExprNode0);
      // Undeclared exception!
      try { 
        typeVisitor0.visitBiExprNode(biExprNode0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Il tipo 1 e il tipo 1 sono incompatibili
         //
         verifyException("visitors.TypeChecker", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      TypeVisitor typeVisitor0 = new TypeVisitor();
      StatOp statOp0 = new StatOp("AND");
      BiExprNode biExprNode0 = new BiExprNode("OR", statOp0, statOp0);
      // Undeclared exception!
      try { 
        typeVisitor0.visitBiExprNode(biExprNode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("visitors.TypeVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      TypeVisitor typeVisitor0 = new TypeVisitor();
      ConstExprNode constExprNode0 = new ConstExprNode("J'tvCp", "PO");
      BiExprNode biExprNode0 = new BiExprNode("PO", constExprNode0, constExprNode0);
      BiExprNode biExprNode1 = new BiExprNode("TIMES", biExprNode0, constExprNode0);
      // Undeclared exception!
      try { 
        typeVisitor0.visitBiExprNode(biExprNode1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Il tipo 1 e il tipo 1 sono incompatibili
         //
         verifyException("visitors.TypeChecker", e);
      }
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      TypeVisitor typeVisitor0 = new TypeVisitor();
      ConstExprNode constExprNode0 = new ConstExprNode("AND", "AND");
      BiExprNode biExprNode0 = new BiExprNode("IMES", constExprNode0, constExprNode0);
      biExprNode0.setNome("MINUS");
      // Undeclared exception!
      try { 
        typeVisitor0.visitBiExprNode(biExprNode0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Il tipo 1 e il tipo 1 sono incompatibili
         //
         verifyException("visitors.TypeChecker", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      TypeVisitor typeVisitor0 = new TypeVisitor();
      ConstExprNode constExprNode0 = new ConstExprNode("", "");
      BiExprNode biExprNode0 = new BiExprNode("PLUS", constExprNode0, constExprNode0);
      // Undeclared exception!
      try { 
        typeVisitor0.visitBiExprNode(biExprNode0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Il tipo 1 e il tipo 1 sono incompatibili
         //
         verifyException("visitors.TypeChecker", e);
      }
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      TypeVisitor typeVisitor0 = new TypeVisitor();
      ReturnStatOp returnStatOp0 = new ReturnStatOp("eZi[l|(cKXsBYg?q", (ExprNode) null);
      VarDeclOp varDeclOp0 = new VarDeclOp("eZi[l|(cKXsBYg?q", (ArrayList<IdInit>) null);
      BodyOp bodyOp0 = new BodyOp(varDeclOp0, (ArrayList<StatOp>) null);
      WhileOp whileOp0 = new WhileOp("eZi[l|(cKXsBYg?q", returnStatOp0, bodyOp0);
      // Undeclared exception!
      try { 
        typeVisitor0.visit(whileOp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("visitors.TypeVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      TypeVisitor typeVisitor0 = new TypeVisitor();
      IdExprNode idExprNode0 = new IdExprNode("BiWR", "'Eznb6^7Q9w_5");
      ReturnStatOp returnStatOp0 = new ReturnStatOp("BiWR", idExprNode0);
      IfStatOp ifStatOp0 = new IfStatOp("BiWR", returnStatOp0, (BodyOp) null, (BodyOp) null);
      UnExprNode unExprNode0 = new UnExprNode("'Eznb6^7Q9w_5", ifStatOp0);
      // Undeclared exception!
      try { 
        typeVisitor0.visitUnExprNode(unExprNode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("visitors.TypeVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      TypeVisitor typeVisitor0 = new TypeVisitor();
      ArrayList<ExprNode> arrayList0 = new ArrayList<ExprNode>();
      WriteOp writeOp0 = new WriteOp("*g", "*g", arrayList0);
      BiExprNode biExprNode0 = new BiExprNode("GE", writeOp0, writeOp0);
      // Undeclared exception!
      try { 
        typeVisitor0.visitBiExprNode(biExprNode0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Il tipo 9 e il tipo 9 sono incompatibili
         //
         verifyException("visitors.TypeChecker", e);
      }
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      TypeVisitor typeVisitor0 = new TypeVisitor();
      IdExprNode idExprNode0 = new IdExprNode(";Zwq", "<AN|D");
      ForStatOp forStatOp0 = new ForStatOp("-uiHH{dt_,ySu", idExprNode0, (ConstExprNode) null, (ConstExprNode) null, (BodyOp) null);
      // Undeclared exception!
      try { 
        forStatOp0.accept(typeVisitor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("visitors.TypeVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      TypeVisitor typeVisitor0 = new TypeVisitor();
      ArrayList<ExprNode> arrayList0 = new ArrayList<ExprNode>();
      IdExprNode idExprNode0 = new IdExprNode("visitors.TypeVisitor", "");
      ArrayList<CallParamOp> arrayList1 = new ArrayList<CallParamOp>();
      CallFunOp callFunOp0 = new CallFunOp("", idExprNode0, arrayList1);
      arrayList0.add((ExprNode) callFunOp0);
      WriteOp writeOp0 = new WriteOp("w\"[=\")]:%QP{{DhblH", "w\"[=\")]:%QP{{DhblH", arrayList0);
      // Undeclared exception!
      try { 
        typeVisitor0.visitWriteOp(writeOp0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Variabile o funzione  non dichiarata!
         //
         verifyException("visitors.TypeVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      TypeVisitor typeVisitor0 = new TypeVisitor();
      IdExprNode idExprNode0 = new IdExprNode("TIMES", "CHAR");
      ArrayList<ParDeclOp> arrayList0 = new ArrayList<ParDeclOp>();
      ArrayList<VarDeclOp> arrayList1 = new ArrayList<VarDeclOp>();
      ArrayList<StatOp> arrayList2 = new ArrayList<StatOp>();
      BodyOp bodyOp0 = new BodyOp(arrayList1, arrayList2);
      FunOp funOp0 = new FunOp(idExprNode0, arrayList0, "TIMES", bodyOp0);
      IsMainFunOp isMainFunOp0 = new IsMainFunOp(true, funOp0);
      ConstExprNode constExprNode0 = new ConstExprNode("TIMES", "");
      IdInit idInit0 = new IdInit(idExprNode0, idExprNode0, constExprNode0);
      VarDeclOp varDeclOp0 = new VarDeclOp("CHAR", idInit0);
      ArrayList<IdInit> arrayList3 = varDeclOp0.getIdInitList();
      AssignOp assignOp0 = new AssignOp("TIMES", arrayList3, (ArrayList<ExprNode>) null);
      arrayList2.add((StatOp) assignOp0);
      // Undeclared exception!
      try { 
        typeVisitor0.visitFunOp(isMainFunOp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("visitors.TypeVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      TypeVisitor typeVisitor0 = new TypeVisitor();
      IdExprNode idExprNode0 = new IdExprNode("BOOLEANOP", "?AaB`?|;gj2");
      IdInit idInit0 = new IdInit(idExprNode0, (ExprNode) null, (ConstExprNode) null);
      VarDeclOp varDeclOp0 = new VarDeclOp("?AaB`?|;gj2", idInit0);
      ArrayList<StatOp> arrayList0 = new ArrayList<StatOp>();
      BodyOp bodyOp0 = new BodyOp(varDeclOp0, arrayList0);
      // Undeclared exception!
      try { 
        typeVisitor0.visitBodyOp(bodyOp0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Variabile o funzione ?AaB`?|;gj2 non dichiarata!
         //
         verifyException("visitors.TypeVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      TypeVisitor typeVisitor0 = new TypeVisitor();
      Stack<SymbolTable> stack0 = typeVisitor0.getActiveStackScope();
      assertTrue(stack0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      TypeVisitor typeVisitor0 = new TypeVisitor();
      typeVisitor0.setHasReturn(true);
  }
}
