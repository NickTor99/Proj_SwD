/*
 * This file was automatically generated by EvoSuite
 * Mon Jun 05 02:13:18 GMT 2023
 */

package visitors;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.EmptyStackException;
import nodes.AbstractSyntaxNode;
import nodes.BodyOp;
import nodes.ConstExprNode;
import nodes.ExprNode;
import nodes.ForStatOp;
import nodes.FunOp;
import nodes.IdExprNode;
import nodes.IdInit;
import nodes.IfStatOp;
import nodes.IsMainFunOp;
import nodes.ParDeclOp;
import nodes.ProgramOp;
import nodes.StatOp;
import nodes.VarDeclOp;
import nodes.WhileOp;
import nodes.WriteOp;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import visitors.ScopingVisitor;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class ScopingVisitor_ESTest extends ScopingVisitor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ScopingVisitor scopingVisitor0 = new ScopingVisitor();
      ArrayList<IdInit> arrayList0 = new ArrayList<IdInit>();
      VarDeclOp varDeclOp0 = new VarDeclOp("B]bCd%FFtQ)Ph7K0", arrayList0);
      BodyOp bodyOp0 = new BodyOp(varDeclOp0, (ArrayList<StatOp>) null);
      WhileOp whileOp0 = new WhileOp("H:8JA&9^jIUq@S18", (ExprNode) null, bodyOp0);
      scopingVisitor0.visitWhileOp(whileOp0);
      assertEquals("H:8JA&9^jIUq@S18", whileOp0.getNome());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ScopingVisitor scopingVisitor0 = new ScopingVisitor();
      ArrayList<IdInit> arrayList0 = new ArrayList<IdInit>();
      VarDeclOp varDeclOp0 = new VarDeclOp("", arrayList0);
      scopingVisitor0.visitVarDeclOp(varDeclOp0);
      assertNull(varDeclOp0.getType());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ScopingVisitor scopingVisitor0 = new ScopingVisitor();
      ArrayList<IdInit> arrayList0 = new ArrayList<IdInit>();
      ParDeclOp parDeclOp0 = new ParDeclOp("@iJkk@FTVkQ\"", "", arrayList0);
      scopingVisitor0.visitParDeclOp(parDeclOp0);
      assertEquals(1, (int)parDeclOp0.getType());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ScopingVisitor scopingVisitor0 = new ScopingVisitor();
      IdExprNode idExprNode0 = new IdExprNode("var", "var");
      ArrayList<StatOp> arrayList0 = new ArrayList<StatOp>();
      ArrayList<VarDeclOp> arrayList1 = new ArrayList<VarDeclOp>();
      BodyOp bodyOp0 = new BodyOp(arrayList1, arrayList0);
      ForStatOp forStatOp0 = new ForStatOp("'yr}`VbF-KhpGC-9", idExprNode0, (ConstExprNode) null, (ConstExprNode) null, bodyOp0);
      scopingVisitor0.visitForStatOp(forStatOp0);
      assertNull(forStatOp0.getType());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IdExprNode idExprNode0 = new IdExprNode("VAR", "VAR");
      ArrayList<ParDeclOp> arrayList0 = new ArrayList<ParDeclOp>();
      ScopingVisitor scopingVisitor0 = new ScopingVisitor();
      ConstExprNode constExprNode0 = new ConstExprNode("VAR", "VAR");
      IdInit idInit0 = new IdInit(idExprNode0, idExprNode0, constExprNode0);
      VarDeclOp varDeclOp0 = new VarDeclOp("VAR", idInit0);
      ArrayList<StatOp> arrayList1 = new ArrayList<StatOp>();
      BodyOp bodyOp0 = new BodyOp(varDeclOp0, arrayList1);
      ArrayList<AbstractSyntaxNode> arrayList2 = new ArrayList<AbstractSyntaxNode>();
      FunOp funOp0 = new FunOp(idExprNode0, arrayList0, "VAR", bodyOp0);
      IsMainFunOp isMainFunOp0 = new IsMainFunOp(false, funOp0);
      ProgramOp programOp0 = new ProgramOp(arrayList2, isMainFunOp0, arrayList2);
      scopingVisitor0.visitProgramOp(programOp0);
      assertNull(programOp0.getType());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ScopingVisitor scopingVisitor0 = new ScopingVisitor();
      // Undeclared exception!
      try { 
        scopingVisitor0.visitWhileOp((WhileOp) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("visitors.ScopingVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ScopingVisitor scopingVisitor0 = new ScopingVisitor();
      IdExprNode idExprNode0 = new IdExprNode("", "");
      ConstExprNode constExprNode0 = new ConstExprNode("", "");
      IdInit idInit0 = new IdInit(idExprNode0, idExprNode0, constExprNode0);
      VarDeclOp varDeclOp0 = new VarDeclOp("", idInit0);
      // Undeclared exception!
      try { 
        scopingVisitor0.visitVarDeclOp(varDeclOp0);
        fail("Expecting exception: EmptyStackException");
      
      } catch(EmptyStackException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Stack", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ScopingVisitor scopingVisitor0 = new ScopingVisitor();
      // Undeclared exception!
      try { 
        scopingVisitor0.visitVarDeclOp((VarDeclOp) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("visitors.ScopingVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ScopingVisitor scopingVisitor0 = new ScopingVisitor();
      // Undeclared exception!
      try { 
        scopingVisitor0.visitProgramOp((ProgramOp) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("visitors.ScopingVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ScopingVisitor scopingVisitor0 = new ScopingVisitor();
      IdExprNode idExprNode0 = new IdExprNode("n(", "n(");
      ConstExprNode constExprNode0 = new ConstExprNode("}c/(:sF", "}c/(:sF");
      IdInit idInit0 = new IdInit(idExprNode0, constExprNode0, constExprNode0);
      ParDeclOp parDeclOp0 = new ParDeclOp("}c/(:sF", "}c/(:sF", idInit0);
      // Undeclared exception!
      try { 
        scopingVisitor0.visitParDeclOp(parDeclOp0);
        fail("Expecting exception: EmptyStackException");
      
      } catch(EmptyStackException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Stack", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ScopingVisitor scopingVisitor0 = new ScopingVisitor();
      // Undeclared exception!
      try { 
        scopingVisitor0.visitParDeclOp((ParDeclOp) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("visitors.ScopingVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ScopingVisitor scopingVisitor0 = new ScopingVisitor();
      // Undeclared exception!
      try { 
        scopingVisitor0.visitIfStatOp((IfStatOp) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("visitors.ScopingVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ScopingVisitor scopingVisitor0 = new ScopingVisitor();
      IdExprNode idExprNode0 = new IdExprNode("7 <q\"(", "7 <q\"(");
      ArrayList<ParDeclOp> arrayList0 = new ArrayList<ParDeclOp>();
      ArrayList<StatOp> arrayList1 = new ArrayList<StatOp>();
      BodyOp bodyOp0 = new BodyOp((ArrayList<VarDeclOp>) null, arrayList1);
      FunOp funOp0 = new FunOp(idExprNode0, arrayList0, "7 <q\"(", bodyOp0);
      IsMainFunOp isMainFunOp0 = new IsMainFunOp(false, funOp0);
      // Undeclared exception!
      try { 
        scopingVisitor0.visitFunOp(isMainFunOp0);
        fail("Expecting exception: EmptyStackException");
      
      } catch(EmptyStackException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Stack", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ScopingVisitor scopingVisitor0 = new ScopingVisitor();
      // Undeclared exception!
      try { 
        scopingVisitor0.visitFunOp((IsMainFunOp) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("visitors.ScopingVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ScopingVisitor scopingVisitor0 = new ScopingVisitor();
      // Undeclared exception!
      try { 
        scopingVisitor0.visitForStatOp((ForStatOp) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("visitors.ScopingVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ScopingVisitor scopingVisitor0 = new ScopingVisitor();
      IdExprNode idExprNode0 = new IdExprNode("param", "IF");
      ConstExprNode constExprNode0 = new ConstExprNode("", "param");
      IdInit idInit0 = new IdInit(idExprNode0, idExprNode0, constExprNode0);
      VarDeclOp varDeclOp0 = new VarDeclOp(" == ", idInit0);
      ArrayList<StatOp> arrayList0 = new ArrayList<StatOp>();
      BodyOp bodyOp0 = new BodyOp(varDeclOp0, arrayList0);
      ForStatOp forStatOp0 = new ForStatOp("", idExprNode0, constExprNode0, constExprNode0, bodyOp0);
      // Undeclared exception!
      try { 
        scopingVisitor0.visitForStatOp(forStatOp0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Identificatore: IF \u00E8 gi\u00E0 dichiarato all'interno dello scope
         //
         verifyException("visitors.ScopingVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ScopingVisitor scopingVisitor0 = new ScopingVisitor();
      // Undeclared exception!
      try { 
        scopingVisitor0.visitBodyOp((BodyOp) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("visitors.ScopingVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      IdExprNode idExprNode0 = new IdExprNode("VAR", "VAR");
      ScopingVisitor scopingVisitor0 = new ScopingVisitor();
      ConstExprNode constExprNode0 = new ConstExprNode("VAR", (String) null);
      IdInit idInit0 = new IdInit(idExprNode0, idExprNode0, constExprNode0);
      VarDeclOp varDeclOp0 = new VarDeclOp("VAR", idInit0);
      ArrayList<StatOp> arrayList0 = new ArrayList<StatOp>();
      BodyOp bodyOp0 = new BodyOp(varDeclOp0, arrayList0);
      // Undeclared exception!
      try { 
        scopingVisitor0.visitBodyOp(bodyOp0);
        fail("Expecting exception: EmptyStackException");
      
      } catch(EmptyStackException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Stack", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ScopingVisitor scopingVisitor0 = new ScopingVisitor();
      ArrayList<StatOp> arrayList0 = new ArrayList<StatOp>();
      ArrayList<VarDeclOp> arrayList1 = new ArrayList<VarDeclOp>();
      BodyOp bodyOp0 = new BodyOp(arrayList1, arrayList0);
      IdExprNode idExprNode0 = new IdExprNode("Ek{vHb,%UG#h0DU\">*", "Il nome della variabile o funzione ");
      ConstExprNode constExprNode0 = new ConstExprNode("&OV,$%Z>kpnAfJ3/hug", "#=!mGl");
      ForStatOp forStatOp0 = new ForStatOp("Ek{vHb,%UG#h0DU\">*", idExprNode0, constExprNode0, constExprNode0, bodyOp0);
      String string0 = scopingVisitor0.visit(forStatOp0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ScopingVisitor scopingVisitor0 = new ScopingVisitor();
      IdExprNode idExprNode0 = new IdExprNode("var", "var");
      IdInit idInit0 = new IdInit(idExprNode0, (ExprNode) null, (ConstExprNode) null);
      VarDeclOp varDeclOp0 = new VarDeclOp(",&", idInit0);
      ArrayList<StatOp> arrayList0 = new ArrayList<StatOp>();
      BodyOp bodyOp0 = new BodyOp(varDeclOp0, arrayList0);
      // Undeclared exception!
      try { 
        scopingVisitor0.visit(bodyOp0);
        fail("Expecting exception: EmptyStackException");
      
      } catch(EmptyStackException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Stack", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ScopingVisitor scopingVisitor0 = new ScopingVisitor();
      ArrayList<IdInit> arrayList0 = new ArrayList<IdInit>();
      ParDeclOp parDeclOp0 = new ParDeclOp("OUT", "OUT", arrayList0);
      scopingVisitor0.visit(parDeclOp0);
      assertEquals(1, (int)parDeclOp0.getType());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ScopingVisitor scopingVisitor0 = new ScopingVisitor();
      IsMainFunOp isMainFunOp0 = new IsMainFunOp(false, (FunOp) null);
      // Undeclared exception!
      try { 
        isMainFunOp0.accept(scopingVisitor0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("visitors.ScopingVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ScopingVisitor scopingVisitor0 = new ScopingVisitor();
      IdExprNode idExprNode0 = new IdExprNode("E4_7*`g", "/[s'x!bWY=E1{8m{/");
      IdInit idInit0 = new IdInit(idExprNode0, idExprNode0, (ConstExprNode) null);
      VarDeclOp varDeclOp0 = new VarDeclOp("/[s'x!bWY=E1{8m{/", idInit0);
      // Undeclared exception!
      try { 
        scopingVisitor0.visit(varDeclOp0);
        fail("Expecting exception: EmptyStackException");
      
      } catch(EmptyStackException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Stack", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ScopingVisitor scopingVisitor0 = new ScopingVisitor();
      IdExprNode idExprNode0 = new IdExprNode("var", "var");
      ArrayList<IdInit> arrayList0 = new ArrayList<IdInit>();
      VarDeclOp varDeclOp0 = new VarDeclOp("z", arrayList0);
      ArrayList<StatOp> arrayList1 = new ArrayList<StatOp>();
      BodyOp bodyOp0 = new BodyOp(varDeclOp0, arrayList1);
      IfStatOp ifStatOp0 = new IfStatOp("0~~I+uC7Q#{s:{3jd", idExprNode0, bodyOp0, (BodyOp) null);
      scopingVisitor0.visitIfStatOp(ifStatOp0);
      assertEquals("0~~I+uC7Q#{s:{3jd", ifStatOp0.getNome());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ScopingVisitor scopingVisitor0 = new ScopingVisitor();
      ArrayList<StatOp> arrayList0 = new ArrayList<StatOp>();
      ArrayList<VarDeclOp> arrayList1 = new ArrayList<VarDeclOp>();
      BodyOp bodyOp0 = new BodyOp(arrayList1, arrayList0);
      arrayList0.add((StatOp) null);
      scopingVisitor0.visitBodyOp(bodyOp0);
      assertNull(bodyOp0.getType());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ScopingVisitor scopingVisitor0 = new ScopingVisitor();
      ArrayList<VarDeclOp> arrayList0 = new ArrayList<VarDeclOp>();
      ArrayList<StatOp> arrayList1 = new ArrayList<StatOp>();
      BodyOp bodyOp0 = new BodyOp(arrayList0, arrayList1);
      ArrayList<ExprNode> arrayList2 = new ArrayList<ExprNode>();
      WriteOp writeOp0 = new WriteOp("", "", arrayList2);
      arrayList1.add((StatOp) writeOp0);
      scopingVisitor0.visitBodyOp(bodyOp0);
      assertNull(bodyOp0.getType());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      IdExprNode idExprNode0 = new IdExprNode("VAR", "VAR");
      ArrayList<ParDeclOp> arrayList0 = new ArrayList<ParDeclOp>();
      ScopingVisitor scopingVisitor0 = new ScopingVisitor();
      ConstExprNode constExprNode0 = new ConstExprNode("VAR", "VAR");
      IdInit idInit0 = new IdInit(idExprNode0, idExprNode0, constExprNode0);
      ParDeclOp parDeclOp0 = new ParDeclOp("", "", idInit0);
      arrayList0.add(parDeclOp0);
      arrayList0.add(parDeclOp0);
      FunOp funOp0 = new FunOp(idExprNode0, arrayList0, "VAR", (BodyOp) null);
      IsMainFunOp isMainFunOp0 = new IsMainFunOp(true, funOp0);
      ArrayList<AbstractSyntaxNode> arrayList1 = new ArrayList<AbstractSyntaxNode>();
      ProgramOp programOp0 = new ProgramOp(arrayList1, isMainFunOp0, arrayList1);
      // Undeclared exception!
      try { 
        scopingVisitor0.visitProgramOp(programOp0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Identificatore: VAR \u00E8 gi\u00E0 dichiarato all'interno dello scope
         //
         verifyException("visitors.ScopingVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ArrayList<IdInit> arrayList0 = new ArrayList<IdInit>();
      ArrayList<StatOp> arrayList1 = new ArrayList<StatOp>();
      VarDeclOp varDeclOp0 = new VarDeclOp("VAR", arrayList0);
      IdExprNode idExprNode0 = new IdExprNode("OUT", "FUN");
      ArrayList<ParDeclOp> arrayList2 = new ArrayList<ParDeclOp>();
      ArrayList<AbstractSyntaxNode> arrayList3 = new ArrayList<AbstractSyntaxNode>();
      BodyOp bodyOp0 = new BodyOp(varDeclOp0, arrayList1);
      FunOp funOp0 = new FunOp(idExprNode0, arrayList2, "OUT", bodyOp0);
      IsMainFunOp isMainFunOp0 = new IsMainFunOp(false, funOp0);
      ProgramOp programOp0 = new ProgramOp(arrayList3, isMainFunOp0, arrayList3);
      ConstExprNode constExprNode0 = new ConstExprNode("var", "var");
      IdInit idInit0 = new IdInit(idExprNode0, constExprNode0, constExprNode0);
      ParDeclOp parDeclOp0 = new ParDeclOp("OUT", "FUN", idInit0);
      arrayList2.add(parDeclOp0);
      ScopingVisitor scopingVisitor0 = new ScopingVisitor();
      scopingVisitor0.visitProgramOp(programOp0);
      assertNull(programOp0.getType());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ScopingVisitor scopingVisitor0 = new ScopingVisitor();
      ArrayList<AbstractSyntaxNode> arrayList0 = new ArrayList<AbstractSyntaxNode>();
      IdExprNode idExprNode0 = new IdExprNode("", "ELSE");
      ArrayList<VarDeclOp> arrayList1 = new ArrayList<VarDeclOp>();
      ArrayList<StatOp> arrayList2 = new ArrayList<StatOp>();
      BodyOp bodyOp0 = new BodyOp(arrayList1, arrayList2);
      FunOp funOp0 = new FunOp(idExprNode0, (ArrayList<ParDeclOp>) null, "", bodyOp0);
      IsMainFunOp isMainFunOp0 = new IsMainFunOp(false, funOp0);
      ProgramOp programOp0 = new ProgramOp(arrayList0, isMainFunOp0, arrayList0);
      scopingVisitor0.visitProgramOp(programOp0);
      assertNull(programOp0.getType());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ScopingVisitor scopingVisitor0 = new ScopingVisitor();
      ArrayList<AbstractSyntaxNode> arrayList0 = new ArrayList<AbstractSyntaxNode>();
      IdExprNode idExprNode0 = new IdExprNode("fun", "fun");
      ConstExprNode constExprNode0 = new ConstExprNode("", "");
      IdInit idInit0 = new IdInit(idExprNode0, idExprNode0, constExprNode0);
      VarDeclOp varDeclOp0 = new VarDeclOp("fun", idInit0);
      ArrayList<VarDeclOp> arrayList1 = new ArrayList<VarDeclOp>();
      ArrayList<StatOp> arrayList2 = new ArrayList<StatOp>();
      BodyOp bodyOp0 = new BodyOp(arrayList1, arrayList2);
      FunOp funOp0 = new FunOp(idExprNode0, (ArrayList<ParDeclOp>) null, "", bodyOp0);
      IsMainFunOp isMainFunOp0 = new IsMainFunOp(false, funOp0);
      ProgramOp programOp0 = new ProgramOp(arrayList0, isMainFunOp0, arrayList0);
      ArrayList<VarDeclOp> arrayList3 = programOp0.getVarDeclList();
      arrayList3.add(varDeclOp0);
      // Undeclared exception!
      try { 
        scopingVisitor0.visitProgramOp(programOp0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Identificatore della funzione: fun \u00E8 gi\u00E0 dichiarato all'interno dello scope
         //
         verifyException("visitors.ScopingVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ScopingVisitor scopingVisitor0 = new ScopingVisitor();
      ArrayList<AbstractSyntaxNode> arrayList0 = new ArrayList<AbstractSyntaxNode>();
      ProgramOp programOp0 = new ProgramOp(arrayList0, (IsMainFunOp) null, arrayList0);
      ArrayList<IsMainFunOp> arrayList1 = new ArrayList<IsMainFunOp>(1044);
      programOp0.setFunList(arrayList1);
      scopingVisitor0.visitProgramOp(programOp0);
      assertNull(programOp0.getType());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      IdExprNode idExprNode0 = new IdExprNode("VAR", "VAR");
      ArrayList<ParDeclOp> arrayList0 = new ArrayList<ParDeclOp>();
      ScopingVisitor scopingVisitor0 = new ScopingVisitor();
      ConstExprNode constExprNode0 = new ConstExprNode("VAR", "VAR");
      IdInit idInit0 = new IdInit(idExprNode0, idExprNode0, constExprNode0);
      VarDeclOp varDeclOp0 = new VarDeclOp("VAR", idInit0);
      ArrayList<StatOp> arrayList1 = new ArrayList<StatOp>();
      BodyOp bodyOp0 = new BodyOp(varDeclOp0, arrayList1);
      ArrayList<AbstractSyntaxNode> arrayList2 = new ArrayList<AbstractSyntaxNode>();
      FunOp funOp0 = new FunOp(idExprNode0, arrayList0, "VAR", bodyOp0);
      IsMainFunOp isMainFunOp0 = new IsMainFunOp(true, funOp0);
      ProgramOp programOp0 = new ProgramOp(arrayList2, isMainFunOp0, arrayList2);
      programOp0.setVarDeclList((ArrayList<VarDeclOp>) null);
      scopingVisitor0.visitProgramOp(programOp0);
      assertNull(programOp0.getType());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      IdExprNode idExprNode0 = new IdExprNode("VAR", "VAR");
      ScopingVisitor scopingVisitor0 = new ScopingVisitor();
      String string0 = scopingVisitor0.visit(idExprNode0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ScopingVisitor scopingVisitor0 = new ScopingVisitor();
      ArrayList<VarDeclOp> arrayList0 = new ArrayList<VarDeclOp>();
      ArrayList<StatOp> arrayList1 = new ArrayList<StatOp>();
      BodyOp bodyOp0 = new BodyOp(arrayList0, arrayList1);
      ExprNode exprNode0 = new ExprNode((String) null);
      IfStatOp ifStatOp0 = new IfStatOp((String) null, exprNode0, bodyOp0, bodyOp0);
      String string0 = scopingVisitor0.visit(ifStatOp0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ScopingVisitor scopingVisitor0 = new ScopingVisitor();
      ArrayList<AbstractSyntaxNode> arrayList0 = new ArrayList<AbstractSyntaxNode>();
      ProgramOp programOp0 = new ProgramOp(arrayList0, (IsMainFunOp) null, arrayList0);
      // Undeclared exception!
      try { 
        scopingVisitor0.visit(programOp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("visitors.ScopingVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      IdExprNode idExprNode0 = new IdExprNode("VAR", "VAR");
      ArrayList<StatOp> arrayList0 = new ArrayList<StatOp>();
      ConstExprNode constExprNode0 = new ConstExprNode("VAR", "-I;Q(8FC");
      IdInit idInit0 = new IdInit(idExprNode0, idExprNode0, constExprNode0);
      VarDeclOp varDeclOp0 = new VarDeclOp("", idInit0);
      BodyOp bodyOp0 = new BodyOp(varDeclOp0, arrayList0);
      ForStatOp forStatOp0 = new ForStatOp("n3;oUT@-wm+y7*b", idExprNode0, constExprNode0, constExprNode0, bodyOp0);
      arrayList0.add((StatOp) forStatOp0);
      ArrayList<VarDeclOp> arrayList1 = new ArrayList<VarDeclOp>();
      BodyOp bodyOp1 = new BodyOp(arrayList1, arrayList0);
      ScopingVisitor scopingVisitor0 = new ScopingVisitor();
      // Undeclared exception!
      try { 
        scopingVisitor0.visitBodyOp(bodyOp1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Identificatore: VAR \u00E8 gi\u00E0 dichiarato all'interno dello scope
         //
         verifyException("visitors.ScopingVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ScopingVisitor scopingVisitor0 = new ScopingVisitor();
      IdExprNode idExprNode0 = new IdExprNode("OUT", "OUT");
      ConstExprNode constExprNode0 = new ConstExprNode("Ve0,.U,~)frjoA", "OUT");
      IdInit idInit0 = new IdInit(idExprNode0, idExprNode0, constExprNode0);
      VarDeclOp varDeclOp0 = new VarDeclOp("OUT", idInit0);
      ArrayList<StatOp> arrayList0 = new ArrayList<StatOp>();
      BodyOp bodyOp0 = new BodyOp(varDeclOp0, arrayList0);
      WhileOp whileOp0 = new WhileOp("", constExprNode0, bodyOp0);
      Object object0 = whileOp0.accept(scopingVisitor0);
      assertNull(object0);
  }
}
