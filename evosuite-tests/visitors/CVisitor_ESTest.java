/*
 * This file was automatically generated by EvoSuite
 * Mon Jun 05 02:15:57 GMT 2023
 */

package visitors;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.Stack;
import nodes.AbstractSyntaxNode;
import nodes.AssignOp;
import nodes.BiExprNode;
import nodes.BodyOp;
import nodes.CallFunOp;
import nodes.CallParamOp;
import nodes.ConstExprNode;
import nodes.ExprNode;
import nodes.ForStatOp;
import nodes.FunOp;
import nodes.IdExprNode;
import nodes.IdInit;
import nodes.IfStatOp;
import nodes.IsMainFunOp;
import nodes.ParDeclOp;
import nodes.ProgramOp;
import nodes.ReadOp;
import nodes.ReturnStatOp;
import nodes.StatOp;
import nodes.UnExprNode;
import nodes.VarDeclOp;
import nodes.WhileOp;
import nodes.WriteOp;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import table.SymbolTable;
import visitors.CVisitor;
import visitors.TypeVisitor;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class CVisitor_ESTest extends CVisitor_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      CVisitor cVisitor0 = new CVisitor();
      IdExprNode idExprNode0 = new IdExprNode("dg/X%r;:e7", "dg/X%r;:e7");
      Integer integer0 = new Integer(64951);
      idExprNode0.setType(integer0);
      String string0 = cVisitor0.exprStringConverter(idExprNode0);
      assertEquals("dg/X%r;:e7", string0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      CVisitor cVisitor0 = new CVisitor();
      ExprNode exprNode0 = new ExprNode("WRITELN");
      ConstExprNode constExprNode0 = new ConstExprNode("WHILE", "WHILE");
      Integer integer0 = new Integer((-1840700267));
      constExprNode0.setType(integer0);
      BiExprNode biExprNode0 = new BiExprNode("WRITELN", constExprNode0, exprNode0);
      Object object0 = biExprNode0.accept(cVisitor0);
      assertEquals("(WHILE)", object0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      CVisitor cVisitor0 = new CVisitor();
      IdExprNode idExprNode0 = new IdExprNode("D=+peNQ%7RZ<{v", "D=+peNQ%7RZ<{v");
      ConstExprNode constExprNode0 = new ConstExprNode("D=+peNQ%7RZ<{v", "y>]C[^!@Oir");
      ArrayList<IdInit> arrayList0 = new ArrayList<IdInit>();
      VarDeclOp varDeclOp0 = new VarDeclOp("y>]C[^!@Oir", arrayList0);
      ArrayList<StatOp> arrayList1 = new ArrayList<StatOp>();
      BodyOp bodyOp0 = new BodyOp(varDeclOp0, arrayList1);
      ForStatOp forStatOp0 = new ForStatOp((String) null, idExprNode0, constExprNode0, constExprNode0, bodyOp0);
      BiExprNode biExprNode0 = new BiExprNode("D=+peNQ%7RZ<{v", forStatOp0, idExprNode0);
      // Undeclared exception!
      try { 
        cVisitor0.exprStringConverter(biExprNode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("visitors.CVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      CVisitor cVisitor0 = new CVisitor();
      IdExprNode idExprNode0 = new IdExprNode((String) null, "eRxF-?)>@Ml~!j");
      ConstExprNode constExprNode0 = new ConstExprNode("eRxF-?)>@Ml~!j", "@H?&]Jr7?z4");
      IdInit idInit0 = new IdInit(idExprNode0, idExprNode0, constExprNode0);
      VarDeclOp varDeclOp0 = new VarDeclOp((String) null, idInit0);
      Integer integer0 = new Integer((-1));
      idExprNode0.setType(integer0);
      ArrayList<IdInit> arrayList0 = varDeclOp0.getIdInitList();
      ReadOp readOp0 = new ReadOp("@H?&]Jr7?z4", arrayList0, constExprNode0);
      // Undeclared exception!
      try { 
        readOp0.accept(cVisitor0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Wrong variable type
         //
         verifyException("visitors.CVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      CVisitor cVisitor0 = new CVisitor();
      IdExprNode idExprNode0 = new IdExprNode("zH?p]Jr7?.<4", "zH?p]Jr7?.<4");
      ConstExprNode constExprNode0 = new ConstExprNode("xU[)eI< ", "xU[)eI< ");
      IdInit idInit0 = new IdInit(idExprNode0, idExprNode0, constExprNode0);
      VarDeclOp varDeclOp0 = new VarDeclOp("zH?p]Jr7?.<4", idInit0);
      ArrayList<IdInit> arrayList0 = varDeclOp0.getIdInitList();
      ArrayList<ExprNode> arrayList1 = new ArrayList<ExprNode>();
      AssignOp assignOp0 = new AssignOp("~P(RuX]QyTl#RVIv?", arrayList0, arrayList1);
      arrayList1.add((ExprNode) constExprNode0);
      arrayList1.add((ExprNode) assignOp0);
      String string0 = cVisitor0.visit(assignOp0);
      assertEquals("zH?p]Jr7?.<4 = xU[)eI< ;\n", string0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      CVisitor cVisitor0 = new CVisitor();
      IdExprNode idExprNode0 = new IdExprNode("D=+peNQ%7RZ<{v", "D=+peNQ%7RZ<{v");
      ConstExprNode constExprNode0 = new ConstExprNode("D=+peNQ%7RZ<{v", ",tK-W7UH]&?XQ");
      IdInit idInit0 = new IdInit(idExprNode0, idExprNode0, constExprNode0);
      VarDeclOp varDeclOp0 = new VarDeclOp(",tK-W7UH]&?XQ", idInit0);
      BodyOp bodyOp0 = new BodyOp(varDeclOp0, (ArrayList<StatOp>) null);
      ConstExprNode constExprNode1 = new ConstExprNode(",tK-W7UH]&?XQ", "}h\"PzGN");
      ForStatOp forStatOp0 = new ForStatOp("O7:gO1Nqdc", idExprNode0, constExprNode1, constExprNode0, bodyOp0);
      // Undeclared exception!
      try { 
        cVisitor0.visitForStatOp(forStatOp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      CVisitor cVisitor0 = new CVisitor();
      ExprNode exprNode0 = new ExprNode((String) null);
      ReturnStatOp returnStatOp0 = new ReturnStatOp((String) null, exprNode0);
      cVisitor0.visitReturnStatOp(returnStatOp0);
      assertNull(returnStatOp0.getNome());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ConstExprNode constExprNode0 = new ConstExprNode(",T{L_L6UDET", ",T{L_L6UDET");
      ArrayList<IdInit> arrayList0 = new ArrayList<IdInit>();
      ArrayList<StatOp> arrayList1 = new ArrayList<StatOp>();
      IdExprNode idExprNode0 = new IdExprNode("PLUS", "sYuID7x,[E[owcmE?Zu");
      VarDeclOp varDeclOp0 = new VarDeclOp("WHILE", arrayList0);
      BodyOp bodyOp0 = new BodyOp(varDeclOp0, arrayList1);
      ForStatOp forStatOp0 = new ForStatOp("PLUS", idExprNode0, constExprNode0, constExprNode0, bodyOp0);
      CVisitor cVisitor0 = new CVisitor();
      String string0 = cVisitor0.visit(forStatOp0);
      assertEquals("int sYuID7x,[E[owcmE?Zu;\nfor(sYuID7x,[E[owcmE?Zu = ,T{L_L6UDET;sYuID7x,[E[owcmE?Zu <= ,T{L_L6UDET;sYuID7x,[E[owcmE?Zu++){\n}\n", string0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      CVisitor cVisitor0 = new CVisitor();
      ConstExprNode constExprNode0 = new ConstExprNode("O7:gO1Nqdc", (String) null);
      CallParamOp callParamOp0 = new CallParamOp(constExprNode0, false);
      IdExprNode idExprNode0 = new IdExprNode("nodes.UnExprNode", "nodes.UnExprNode");
      ArrayList<CallParamOp> arrayList0 = new ArrayList<CallParamOp>();
      CallFunOp callFunOp0 = new CallFunOp((String) null, idExprNode0, arrayList0);
      arrayList0.add(callParamOp0);
      String string0 = cVisitor0.visit(callFunOp0);
      assertEquals("nodes.UnExprNode(null);\n", string0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      IdExprNode idExprNode0 = new IdExprNode("NOT", "*Yq_gHpQCQ/|K");
      ConstExprNode constExprNode0 = new ConstExprNode((String) null, "@H?&]Jr7?z<4");
      ConstExprNode constExprNode1 = new ConstExprNode("ERROR", "*Yq_gHpQCQ/|K");
      IdInit idInit0 = new IdInit(idExprNode0, constExprNode1, constExprNode0);
      VarDeclOp varDeclOp0 = new VarDeclOp("5-!kM", idInit0);
      Integer integer0 = new Integer((-1));
      idExprNode0.setType(integer0);
      CVisitor cVisitor0 = new CVisitor();
      ArrayList<StatOp> arrayList0 = new ArrayList<StatOp>();
      BodyOp bodyOp0 = new BodyOp(varDeclOp0, arrayList0);
      String string0 = cVisitor0.visit(bodyOp0);
      assertEquals("#define *Yq_gHpQCQ/|K (ERROR) *Yq_gHpQCQ/|K\n", string0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      CVisitor cVisitor0 = new CVisitor();
      ArrayList<ExprNode> arrayList0 = new ArrayList<ExprNode>();
      WriteOp writeOp0 = new WriteOp("b;W=D_5[,", "b;W=D_5[,", arrayList0);
      ConstExprNode constExprNode0 = new ConstExprNode("", "3z@OOaLfhe^cRuBG`");
      IdInit idInit0 = new IdInit((IdExprNode) null, writeOp0, constExprNode0);
      VarDeclOp varDeclOp0 = new VarDeclOp("3z@OOaLfhe^cRuBG`", idInit0);
      ArrayList<IdInit> arrayList1 = varDeclOp0.getIdInitList();
      AssignOp assignOp0 = new AssignOp("b;W=D_5[,", arrayList1, arrayList0);
      UnExprNode unExprNode0 = new UnExprNode("STRING_CONST", assignOp0);
      cVisitor0.visit(constExprNode0);
      String string0 = cVisitor0.visitUnExprNode(unExprNode0);
      assertEquals("3z@OOaLfhe^cRuBG`", string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      CVisitor cVisitor0 = new CVisitor();
      ArrayList<IdInit> arrayList0 = new ArrayList<IdInit>();
      ParDeclOp parDeclOp0 = new ParDeclOp("", "TIsV", arrayList0);
      String string0 = cVisitor0.visitParDeclOp(parDeclOp0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ConstExprNode constExprNode0 = new ConstExprNode("zH?p]Jr7?.<4", "zH?p]Jr7?.<4");
      constExprNode0.setConstante((String) null);
      CVisitor cVisitor0 = new CVisitor();
      String string0 = cVisitor0.visitConstExprNode(constExprNode0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      ConstExprNode constExprNode0 = new ConstExprNode("O7:gO1Nqdc", (String) null);
      CVisitor cVisitor0 = new CVisitor();
      String string0 = cVisitor0.visit(constExprNode0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      CVisitor cVisitor0 = new CVisitor();
      IdExprNode idExprNode0 = new IdExprNode((String) null, "@H?&]Jr7?z4");
      Integer integer0 = new Integer((-1));
      idExprNode0.setType(integer0);
      idExprNode0.setNameId((String) null);
      String string0 = cVisitor0.exprStringConverter(idExprNode0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      ArrayList<ExprNode> arrayList0 = new ArrayList<ExprNode>();
      WriteOp writeOp0 = new WriteOp("bJPgn:Z", "bJPgn:Z", arrayList0);
      TypeVisitor typeVisitor0 = new TypeVisitor();
      writeOp0.accept(typeVisitor0);
      arrayList0.add((ExprNode) writeOp0);
      CVisitor cVisitor0 = new CVisitor();
      // Undeclared exception!
      try { 
        cVisitor0.visitWriteOp(writeOp0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Wrong variable type
         //
         verifyException("visitors.CVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      CVisitor cVisitor0 = new CVisitor();
      StatOp statOp0 = new StatOp(") ");
      // Undeclared exception!
      try { 
        cVisitor0.visitWriteOp(statOp0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // nodes.StatOp cannot be cast to nodes.WriteOp
         //
         verifyException("visitors.CVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      IdExprNode idExprNode0 = new IdExprNode("PLUS", "PLUS");
      CVisitor cVisitor0 = new CVisitor();
      // Undeclared exception!
      try { 
        cVisitor0.visitWhileOp(idExprNode0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // nodes.IdExprNode cannot be cast to nodes.WhileOp
         //
         verifyException("visitors.CVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      CVisitor cVisitor0 = new CVisitor();
      StatOp statOp0 = new StatOp("7.U");
      // Undeclared exception!
      try { 
        cVisitor0.visitVarDeclOp(statOp0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // nodes.StatOp cannot be cast to nodes.VarDeclOp
         //
         verifyException("visitors.CVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      CVisitor cVisitor0 = new CVisitor();
      // Undeclared exception!
      try { 
        cVisitor0.visitUnExprNode((AbstractSyntaxNode) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("visitors.CVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      CVisitor cVisitor0 = new CVisitor();
      StatOp statOp0 = new StatOp("PLUS");
      // Undeclared exception!
      try { 
        cVisitor0.visitUnExprNode(statOp0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // nodes.StatOp cannot be cast to nodes.UnExprNode
         //
         verifyException("visitors.CVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      CVisitor cVisitor0 = new CVisitor();
      // Undeclared exception!
      try { 
        cVisitor0.visitReturnStatOp((AbstractSyntaxNode) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("visitors.CVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      CVisitor cVisitor0 = new CVisitor();
      StatOp statOp0 = new StatOp("7.U");
      // Undeclared exception!
      try { 
        cVisitor0.visitReadOp(statOp0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // nodes.StatOp cannot be cast to nodes.ReadOp
         //
         verifyException("visitors.CVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      CVisitor cVisitor0 = new CVisitor();
      ExprNode exprNode0 = new ExprNode("TRUE");
      // Undeclared exception!
      try { 
        cVisitor0.visitProgramOp(exprNode0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // nodes.ExprNode cannot be cast to nodes.ProgramOp
         //
         verifyException("visitors.CVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      CVisitor cVisitor0 = new CVisitor();
      // Undeclared exception!
      try { 
        cVisitor0.visitParDeclOp((AbstractSyntaxNode) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("visitors.CVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      IdExprNode idExprNode0 = new IdExprNode("PLUS", "PLUS");
      CVisitor cVisitor0 = new CVisitor();
      // Undeclared exception!
      try { 
        cVisitor0.visitParDeclOp(idExprNode0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // nodes.IdExprNode cannot be cast to nodes.ParDeclOp
         //
         verifyException("visitors.CVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      CVisitor cVisitor0 = new CVisitor();
      // Undeclared exception!
      try { 
        cVisitor0.visitIfStatOp((AbstractSyntaxNode) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("visitors.CVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      IdExprNode idExprNode0 = new IdExprNode("PLUS", "PLUS");
      CVisitor cVisitor0 = new CVisitor();
      // Undeclared exception!
      try { 
        cVisitor0.visitIfStatOp(idExprNode0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // nodes.IdExprNode cannot be cast to nodes.IfStatOp
         //
         verifyException("visitors.CVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      CVisitor cVisitor0 = new CVisitor();
      IdExprNode idExprNode0 = new IdExprNode("X-jL", "X-jL");
      // Undeclared exception!
      try { 
        cVisitor0.visitIdExprNode(idExprNode0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Variabile o funzione X-jL non dichiarata!
         //
         verifyException("visitors.CVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      CVisitor cVisitor0 = new CVisitor();
      // Undeclared exception!
      try { 
        cVisitor0.visitIdExprNode((AbstractSyntaxNode) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("visitors.CVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ConstExprNode constExprNode0 = new ConstExprNode("O:JO1Nqdc", "O:JO1Nqdc");
      CVisitor cVisitor0 = new CVisitor();
      // Undeclared exception!
      try { 
        cVisitor0.visitIdExprNode(constExprNode0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // nodes.ConstExprNode cannot be cast to nodes.IdExprNode
         //
         verifyException("visitors.CVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      CVisitor cVisitor0 = new CVisitor();
      // Undeclared exception!
      try { 
        cVisitor0.visitFunOp((AbstractSyntaxNode) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("visitors.CVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      CVisitor cVisitor0 = new CVisitor();
      IdExprNode idExprNode0 = new IdExprNode("{--]CmC|;p,zUCZz+", "8/0dB6tiH)[u");
      // Undeclared exception!
      try { 
        cVisitor0.visitFunOp(idExprNode0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // nodes.IdExprNode cannot be cast to nodes.IsMainFunOp
         //
         verifyException("visitors.CVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      CVisitor cVisitor0 = new CVisitor();
      ConstExprNode constExprNode0 = new ConstExprNode("", "");
      // Undeclared exception!
      try { 
        cVisitor0.visitForStatOp(constExprNode0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // nodes.ConstExprNode cannot be cast to nodes.ForStatOp
         //
         verifyException("visitors.CVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      CVisitor cVisitor0 = new CVisitor();
      // Undeclared exception!
      try { 
        cVisitor0.visitConstExprNode((AbstractSyntaxNode) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("visitors.CVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      IdExprNode idExprNode0 = new IdExprNode("PLUS", "PLUS");
      CVisitor cVisitor0 = new CVisitor();
      // Undeclared exception!
      try { 
        cVisitor0.visitConstExprNode(idExprNode0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // nodes.IdExprNode cannot be cast to nodes.ConstExprNode
         //
         verifyException("visitors.CVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      IdExprNode idExprNode0 = new IdExprNode("PLUS", "PLUS");
      CVisitor cVisitor0 = new CVisitor();
      // Undeclared exception!
      try { 
        cVisitor0.visitCallParamOp(idExprNode0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // nodes.IdExprNode cannot be cast to nodes.CallParamOp
         //
         verifyException("visitors.CVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      CVisitor cVisitor0 = new CVisitor();
      // Undeclared exception!
      try { 
        cVisitor0.visitCallFunOp((AbstractSyntaxNode) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("visitors.CVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      CVisitor cVisitor0 = new CVisitor();
      ConstExprNode constExprNode0 = new ConstExprNode("", "");
      // Undeclared exception!
      try { 
        cVisitor0.visitCallFunOp(constExprNode0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // nodes.ConstExprNode cannot be cast to nodes.CallFunOp
         //
         verifyException("visitors.CVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      CVisitor cVisitor0 = new CVisitor();
      IdExprNode idExprNode0 = new IdExprNode("@H?&]Jr7?z4", ".P8D.;?'Utd%x~-|_`^");
      ConstExprNode constExprNode0 = new ConstExprNode("@H?&]Jr7?z<4", (String) null);
      IdInit idInit0 = new IdInit(idExprNode0, idExprNode0, constExprNode0);
      VarDeclOp varDeclOp0 = new VarDeclOp("5-!kM", idInit0);
      Integer integer0 = new Integer((-1));
      idExprNode0.setType(integer0);
      ArrayList<StatOp> arrayList0 = new ArrayList<StatOp>();
      BodyOp bodyOp0 = new BodyOp(varDeclOp0, arrayList0);
      // Undeclared exception!
      try { 
        cVisitor0.visitBodyOp(bodyOp0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Variabile o funzione .P8D.;?'Utd%x~-|_`^ non dichiarata!
         //
         verifyException("visitors.CVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      CVisitor cVisitor0 = new CVisitor();
      StatOp statOp0 = new StatOp("");
      // Undeclared exception!
      try { 
        cVisitor0.visitBodyOp(statOp0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // nodes.StatOp cannot be cast to nodes.BodyOp
         //
         verifyException("visitors.CVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      CVisitor cVisitor0 = new CVisitor();
      // Undeclared exception!
      try { 
        cVisitor0.visitBiExprNode((AbstractSyntaxNode) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("visitors.CVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      CVisitor cVisitor0 = new CVisitor();
      IdExprNode idExprNode0 = new IdExprNode("", "");
      // Undeclared exception!
      try { 
        cVisitor0.visitBiExprNode(idExprNode0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // nodes.IdExprNode cannot be cast to nodes.BiExprNode
         //
         verifyException("visitors.CVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      CVisitor cVisitor0 = new CVisitor();
      // Undeclared exception!
      try { 
        cVisitor0.visitAssignOp((AbstractSyntaxNode) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("visitors.CVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      CVisitor cVisitor0 = new CVisitor();
      StatOp statOp0 = new StatOp("uQr8gHd");
      // Undeclared exception!
      try { 
        cVisitor0.visitAssignOp(statOp0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // nodes.StatOp cannot be cast to nodes.AssignOp
         //
         verifyException("visitors.CVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      CVisitor cVisitor0 = new CVisitor();
      ArrayList<IdInit> arrayList0 = new ArrayList<IdInit>();
      ArrayList<ExprNode> arrayList1 = new ArrayList<ExprNode>();
      AssignOp assignOp0 = new AssignOp("FqWv'", arrayList0, arrayList1);
      IdExprNode idExprNode0 = new IdExprNode("p]nnqX+^.9EUP", "xU[)eI< ");
      ConstExprNode constExprNode0 = new ConstExprNode("xU[)eI< ", "-jn>^");
      IdInit idInit0 = new IdInit(idExprNode0, assignOp0, constExprNode0);
      arrayList0.add(idInit0);
      // Undeclared exception!
      try { 
        cVisitor0.visit(assignOp0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      ArrayList<ExprNode> arrayList0 = new ArrayList<ExprNode>();
      WriteOp writeOp0 = new WriteOp("bJPgn:Z", "bJPgn:Z", arrayList0);
      TypeVisitor typeVisitor0 = new TypeVisitor();
      writeOp0.accept(typeVisitor0);
      arrayList0.add((ExprNode) writeOp0);
      CVisitor cVisitor0 = new CVisitor();
      // Undeclared exception!
      try { 
        cVisitor0.visit(writeOp0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Wrong variable type
         //
         verifyException("visitors.CVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      CVisitor cVisitor0 = new CVisitor();
      // Undeclared exception!
      try { 
        cVisitor0.typeConverter((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("visitors.CVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      IdExprNode idExprNode0 = new IdExprNode("NOT", "NOT");
      Integer integer0 = Integer.getInteger((String) null, (-1879439115));
      idExprNode0.setType(integer0);
      BiExprNode biExprNode0 = new BiExprNode("CHAR_CONST", idExprNode0, idExprNode0);
      CVisitor cVisitor0 = new CVisitor();
      // Undeclared exception!
      try { 
        cVisitor0.exprStringConverter(biExprNode0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Variabile o funzione NOT non dichiarata!
         //
         verifyException("visitors.CVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      CVisitor cVisitor0 = new CVisitor();
      String string0 = cVisitor0.typeConverter("exceptions.TypeMismatchException");
      assertEquals("ERROR", string0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      CVisitor cVisitor0 = new CVisitor();
      String string0 = cVisitor0.typeConverter("STRING");
      assertEquals("STRING", string0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      CVisitor cVisitor0 = new CVisitor();
      ArrayList<IdInit> arrayList0 = new ArrayList<IdInit>();
      ArrayList<ExprNode> arrayList1 = new ArrayList<ExprNode>();
      AssignOp assignOp0 = new AssignOp("zH?pr7?.<4", arrayList0, arrayList1);
      UnExprNode unExprNode0 = new UnExprNode("zH?pr7?.<4", assignOp0);
      String string0 = cVisitor0.visitUnExprNode(unExprNode0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      IdExprNode idExprNode0 = new IdExprNode("NOT", "NOT");
      CVisitor cVisitor0 = new CVisitor();
      UnExprNode unExprNode0 = new UnExprNode("NOT", idExprNode0);
      // Undeclared exception!
      try { 
        cVisitor0.visitUnExprNode(unExprNode0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Variabile o funzione NOT non dichiarata!
         //
         verifyException("visitors.CVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ConstExprNode constExprNode0 = new ConstExprNode("O7:JO1Nqdc", "CHAR'_CONST");
      constExprNode0.setNome("CHAR_CONST");
      CVisitor cVisitor0 = new CVisitor();
      String string0 = cVisitor0.visitConstExprNode(constExprNode0);
      assertEquals("\"CHAR'_CONST\"", string0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      CVisitor cVisitor0 = new CVisitor();
      ConstExprNode constExprNode0 = new ConstExprNode("vMIc}/`UW2R3:e5%p'", "");
      String string0 = cVisitor0.visitConstExprNode(constExprNode0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      CVisitor cVisitor0 = new CVisitor();
      Integer integer0 = new Integer(328);
      ConstExprNode constExprNode0 = new ConstExprNode(", RETURN TYPE:", "go2N=O");
      constExprNode0.setType(integer0);
      BiExprNode biExprNode0 = new BiExprNode("TRUE", constExprNode0, constExprNode0);
      cVisitor0.visitBiExprNode(biExprNode0);
      assertEquals("TRUE", biExprNode0.getNome());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      CVisitor cVisitor0 = new CVisitor();
      ArrayList<ExprNode> arrayList0 = new ArrayList<ExprNode>();
      WriteOp writeOp0 = new WriteOp("PLUS", "=}x$uGIfSC9*cE", arrayList0);
      cVisitor0.visitWriteOp(writeOp0);
      assertEquals("=}x$uGIfSC9*cE", writeOp0.getWriteType());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      CVisitor cVisitor0 = new CVisitor();
      ConstExprNode constExprNode0 = new ConstExprNode("zH?p]Jr7?.<4", "zH?p]Jr7?.<4");
      ArrayList<IdInit> arrayList0 = new ArrayList<IdInit>();
      ReadOp readOp0 = new ReadOp("zH?p]Jr7?.<4", arrayList0, constExprNode0);
      cVisitor0.visitReadOp(readOp0);
      assertNull(readOp0.getType());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      CVisitor cVisitor0 = new CVisitor();
      ConstExprNode constExprNode0 = new ConstExprNode("Pcnk", " E}@cs@;N srL@hy");
      ArrayList<VarDeclOp> arrayList0 = new ArrayList<VarDeclOp>();
      ArrayList<StatOp> arrayList1 = new ArrayList<StatOp>();
      BodyOp bodyOp0 = new BodyOp(arrayList0, arrayList1);
      IfStatOp ifStatOp0 = new IfStatOp("Pcnk", constExprNode0, bodyOp0, bodyOp0);
      cVisitor0.visitIfStatOp(ifStatOp0);
      assertNull(ifStatOp0.getType());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      CVisitor cVisitor0 = new CVisitor();
      IdExprNode idExprNode0 = new IdExprNode(",", ",");
      ConstExprNode constExprNode0 = new ConstExprNode("vbV9/<", ",");
      IdInit idInit0 = new IdInit(idExprNode0, idExprNode0, constExprNode0);
      VarDeclOp varDeclOp0 = new VarDeclOp(";f#mgT|8H", idInit0);
      ArrayList<StatOp> arrayList0 = new ArrayList<StatOp>();
      BodyOp bodyOp0 = new BodyOp(varDeclOp0, arrayList0);
      ForStatOp forStatOp0 = new ForStatOp("O0`^", idExprNode0, constExprNode0, constExprNode0, bodyOp0);
      CallParamOp callParamOp0 = new CallParamOp(forStatOp0, true);
      // Undeclared exception!
      try { 
        cVisitor0.visitCallParamOp(callParamOp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("visitors.CVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      CVisitor cVisitor0 = new CVisitor();
      IdExprNode idExprNode0 = new IdExprNode("i[JL^,Va4?;t.R", "WC\"W.!F+RB6QSFe");
      CallParamOp callParamOp0 = new CallParamOp(idExprNode0, false);
      // Undeclared exception!
      try { 
        cVisitor0.visitCallParamOp(callParamOp0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Variabile o funzione WC\"W.!F+RB6QSFe non dichiarata!
         //
         verifyException("visitors.CVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      CVisitor cVisitor0 = new CVisitor();
      ArrayList<StatOp> arrayList0 = new ArrayList<StatOp>();
      ArrayList<IdInit> arrayList1 = new ArrayList<IdInit>();
      ConstExprNode constExprNode0 = new ConstExprNode("CHAR_CONST", (String) null);
      ReadOp readOp0 = new ReadOp("CHAR_CONST", arrayList1, constExprNode0);
      arrayList0.add((StatOp) readOp0);
      ArrayList<VarDeclOp> arrayList2 = new ArrayList<VarDeclOp>();
      BodyOp bodyOp0 = new BodyOp(arrayList2, arrayList0);
      String string0 = cVisitor0.visitBodyOp(bodyOp0);
      assertEquals(1, arrayList0.size());
      assertEquals("printf(\"null\");\n", string0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      CVisitor cVisitor0 = new CVisitor();
      ArrayList<StatOp> arrayList0 = new ArrayList<StatOp>();
      ConstExprNode constExprNode0 = new ConstExprNode("Wv'", "84/=Q6g}C");
      IdInit idInit0 = new IdInit((IdExprNode) null, (ExprNode) null, constExprNode0);
      VarDeclOp varDeclOp0 = new VarDeclOp("TIXE~hU$", idInit0);
      BodyOp bodyOp0 = new BodyOp(varDeclOp0, arrayList0);
      // Undeclared exception!
      try { 
        cVisitor0.visitBodyOp(bodyOp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("visitors.CVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      CVisitor cVisitor0 = new CVisitor();
      ArrayList<IdInit> arrayList0 = new ArrayList<IdInit>();
      ArrayList<StatOp> arrayList1 = new ArrayList<StatOp>();
      VarDeclOp varDeclOp0 = new VarDeclOp("sYuID7x,[E[owcmE?Zu", arrayList0);
      BodyOp bodyOp0 = new BodyOp(varDeclOp0, arrayList1);
      String string0 = cVisitor0.visitBodyOp(bodyOp0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      CVisitor cVisitor0 = new CVisitor();
      ConstExprNode constExprNode0 = new ConstExprNode("i[JL,Va4?;t.R", "i[JL,Va4?;t.R");
      ArrayList<IdInit> arrayList0 = new ArrayList<IdInit>();
      IdExprNode idExprNode0 = new IdExprNode("BOOL", "Errore: le costanti del ciclo for devono essere numeri interi");
      IdInit idInit0 = new IdInit(idExprNode0, constExprNode0, constExprNode0);
      arrayList0.add(idInit0);
      ParDeclOp parDeclOp0 = new ParDeclOp("", "i[JL,Va4?;t.R", arrayList0);
      String string0 = cVisitor0.visitParDeclOp(parDeclOp0);
      assertEquals("ERROR Errore: le costanti del ciclo for devono essere numeri interi,", string0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      CVisitor cVisitor0 = new CVisitor();
      IdExprNode idExprNode0 = new IdExprNode("PE:YwcAK\"yE\" R", "PE:YwcAK\"yE\" R");
      ConstExprNode constExprNode0 = new ConstExprNode("ERROR", "3^MkdIfd8RWb}");
      IdInit idInit0 = new IdInit(idExprNode0, idExprNode0, constExprNode0);
      VarDeclOp varDeclOp0 = new VarDeclOp("PE:YwcAK\"yE\" R", idInit0);
      Integer integer0 = new Integer((-1775));
      idExprNode0.setType(integer0);
      // Undeclared exception!
      try { 
        cVisitor0.visitVarDeclOp(varDeclOp0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Variabile o funzione PE:YwcAK\"yE\" R non dichiarata!
         //
         verifyException("visitors.CVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ArrayList<IdInit> arrayList0 = new ArrayList<IdInit>();
      VarDeclOp varDeclOp0 = new VarDeclOp("NOT", arrayList0);
      CVisitor cVisitor0 = new CVisitor();
      String string0 = cVisitor0.visitVarDeclOp(varDeclOp0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      IdExprNode idExprNode0 = new IdExprNode(",|XO5ir+Qw=L=Fi5)", ",|XO5ir+Qw=L=Fi5)");
      ConstExprNode constExprNode0 = new ConstExprNode(",|XO5ir+Qw=L=Fi5)", ",|XO5ir+Qw=L=Fi5)");
      IdInit idInit0 = new IdInit(idExprNode0, idExprNode0, constExprNode0);
      VarDeclOp varDeclOp0 = new VarDeclOp(",|XO5ir+Qw=L=Fi5)", idInit0);
      CVisitor cVisitor0 = new CVisitor();
      // Undeclared exception!
      try { 
        cVisitor0.visitVarDeclOp(varDeclOp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("visitors.CVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      CVisitor cVisitor0 = new CVisitor();
      ArrayList<AbstractSyntaxNode> arrayList0 = new ArrayList<AbstractSyntaxNode>();
      IsMainFunOp isMainFunOp0 = new IsMainFunOp(false, (FunOp) null);
      ProgramOp programOp0 = new ProgramOp(arrayList0, isMainFunOp0, arrayList0);
      // Undeclared exception!
      try { 
        cVisitor0.visitProgramOp(programOp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("visitors.CVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      CVisitor cVisitor0 = new CVisitor();
      IdExprNode idExprNode0 = new IdExprNode("WHILE", "bJPgn:Z");
      WhileOp whileOp0 = new WhileOp("WHILE", idExprNode0, (BodyOp) null);
      // Undeclared exception!
      try { 
        cVisitor0.visit(whileOp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("visitors.CVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      CVisitor cVisitor0 = new CVisitor();
      ConstExprNode constExprNode0 = new ConstExprNode("", "");
      String string0 = cVisitor0.visit(constExprNode0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      CVisitor cVisitor0 = new CVisitor();
      IdExprNode idExprNode0 = new IdExprNode((String) null, "Dr");
      Integer integer0 = new Integer(44);
      idExprNode0.setType(integer0);
      String string0 = cVisitor0.exprStringConverter(idExprNode0);
      assertEquals("doubleToString(Dr)", string0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      CVisitor cVisitor0 = new CVisitor();
      IdExprNode idExprNode0 = new IdExprNode((String) null, "Dr");
      Integer integer0 = new Integer(43);
      idExprNode0.setType(integer0);
      String string0 = cVisitor0.exprStringConverter(idExprNode0);
      assertEquals("intToString(Dr)", string0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ArrayList<ExprNode> arrayList0 = new ArrayList<ExprNode>();
      WriteOp writeOp0 = new WriteOp("bJPgn:Z", "bJPgn:Z", arrayList0);
      TypeVisitor typeVisitor0 = new TypeVisitor();
      writeOp0.accept(typeVisitor0);
      arrayList0.add((ExprNode) writeOp0);
      CVisitor cVisitor0 = new CVisitor();
      BiExprNode biExprNode0 = new BiExprNode("bJPgn:Z", writeOp0, writeOp0);
      // Undeclared exception!
      try { 
        cVisitor0.exprStringConverter(biExprNode0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Wrong variable type
         //
         verifyException("visitors.CVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ConstExprNode constExprNode0 = new ConstExprNode("nodes.ParDeclOp", "#olLZ[|1kH`BzTU1Gw@");
      Integer integer0 = new Integer(8);
      IdExprNode idExprNode0 = new IdExprNode("go2N=O", "#olLZ[|1kH`BzTU1Gw@");
      idExprNode0.setType(integer0);
      IdInit idInit0 = new IdInit(idExprNode0, idExprNode0, constExprNode0);
      VarDeclOp varDeclOp0 = new VarDeclOp("3z@OOaLfhe^cRuBG`", idInit0);
      ArrayList<IdInit> arrayList0 = varDeclOp0.getIdInitList();
      CVisitor cVisitor0 = new CVisitor();
      ReadOp readOp0 = new ReadOp("Il nome della variabile o funzione ", arrayList0, constExprNode0);
      Object object0 = readOp0.accept(cVisitor0);
      assertEquals("printf(\"#olLZ[|1kH`BzTU1Gw@\");\nscanf(\"%c\",&#olLZ[|1kH`BzTU1Gw@);\n", object0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      CVisitor cVisitor0 = new CVisitor();
      String string0 = cVisitor0.typeConverter("VOID");
      assertEquals("void", string0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ConstExprNode constExprNode0 = new ConstExprNode("nodes.ParDeclOp", "#olLZ[|1kH`BzTU1Gw@");
      Integer integer0 = new Integer(8);
      IdExprNode idExprNode0 = new IdExprNode("go2N=O", "#olLZ[|1kH`BzTU1Gw@");
      idExprNode0.setType(integer0);
      IdInit idInit0 = new IdInit(idExprNode0, idExprNode0, constExprNode0);
      VarDeclOp varDeclOp0 = new VarDeclOp("nodes.ParDeclOp", idInit0);
      CVisitor cVisitor0 = new CVisitor();
      // Undeclared exception!
      try { 
        cVisitor0.visit(varDeclOp0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Variabile o funzione #olLZ[|1kH`BzTU1Gw@ non dichiarata!
         //
         verifyException("visitors.CVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      CVisitor cVisitor0 = new CVisitor();
      String string0 = cVisitor0.typeConverter("BOOL");
      assertEquals("int", string0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      CVisitor cVisitor0 = new CVisitor();
      String string0 = cVisitor0.typeConverter("INTEGER");
      assertEquals("int", string0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      CVisitor cVisitor0 = new CVisitor();
      IdExprNode idExprNode0 = new IdExprNode(" = malloc(256);\n", " = malloc(256);\n");
      ArrayList<CallParamOp> arrayList0 = new ArrayList<CallParamOp>();
      CallFunOp callFunOp0 = new CallFunOp(" = malloc(256);\n", idExprNode0, arrayList0);
      callFunOp0.setExpr(true);
      String string0 = cVisitor0.visit(callFunOp0);
      assertEquals(" = malloc(256);\n)", string0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      IdExprNode idExprNode0 = new IdExprNode("POW", "F[E09.");
      CallFunOp callFunOp0 = new CallFunOp("POW", idExprNode0, (ArrayList<CallParamOp>) null);
      CVisitor cVisitor0 = new CVisitor();
      String string0 = cVisitor0.visit(callFunOp0);
      assertEquals("F[E09.();\n", string0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      CVisitor cVisitor0 = new CVisitor();
      ConstExprNode constExprNode0 = new ConstExprNode("", "");
      UnExprNode unExprNode0 = new UnExprNode("NOT", constExprNode0);
      String string0 = cVisitor0.visit(unExprNode0);
      assertEquals("!()", string0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      CVisitor cVisitor0 = new CVisitor();
      ConstExprNode constExprNode0 = new ConstExprNode("MINUS", "M}qE/'mxH(INTje]");
      UnExprNode unExprNode0 = new UnExprNode("MINUS", constExprNode0);
      String string0 = cVisitor0.exprStringConverter(unExprNode0);
      assertEquals("\"M}qE/'mxH(INTje] * (-1)\"", string0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ConstExprNode constExprNode0 = new ConstExprNode("CHAR_CONST", "CHAR_CONST");
      CVisitor cVisitor0 = new CVisitor();
      String string0 = cVisitor0.exprStringConverter(constExprNode0);
      assertEquals("\"CHAR_CONST\"", string0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ConstExprNode constExprNode0 = new ConstExprNode("STRING_CONST", (String) null);
      CVisitor cVisitor0 = new CVisitor();
      String string0 = cVisitor0.exprStringConverter(constExprNode0);
      assertEquals("\"null\"", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ConstExprNode constExprNode0 = new ConstExprNode("nodes.ReadOp", " >= ");
      Integer integer0 = new Integer(8);
      constExprNode0.setType(integer0);
      BiExprNode biExprNode0 = new BiExprNode("f>SU7<8J", constExprNode0, constExprNode0);
      CVisitor cVisitor0 = new CVisitor();
      String string0 = cVisitor0.visit(biExprNode0);
      assertEquals("( >=  >= )", string0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Integer integer0 = new Integer(7);
      ConstExprNode constExprNode0 = new ConstExprNode("ERROR", "");
      constExprNode0.setType(integer0);
      BiExprNode biExprNode0 = new BiExprNode("ERROR", constExprNode0, constExprNode0);
      CVisitor cVisitor0 = new CVisitor();
      String string0 = cVisitor0.exprStringConverter(biExprNode0);
      assertEquals("\"()\"", string0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      CVisitor cVisitor0 = new CVisitor();
      ArrayList<ExprNode> arrayList0 = new ArrayList<ExprNode>();
      WriteOp writeOp0 = new WriteOp(", TYPE:", "WRITELN", arrayList0);
      String string0 = cVisitor0.visit(writeOp0);
      assertEquals("printf(\"\\n\");\n", string0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ArrayList<ExprNode> arrayList0 = new ArrayList<ExprNode>();
      WriteOp writeOp0 = new WriteOp("bTPgn:Z", "bTPgn:Z", arrayList0);
      arrayList0.add((ExprNode) writeOp0);
      CVisitor cVisitor0 = new CVisitor();
      // Undeclared exception!
      try { 
        cVisitor0.visitWriteOp(writeOp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("visitors.CVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ConstExprNode constExprNode0 = new ConstExprNode("'G#1m&X0,=F^Q", "'G#1m&X0,=F^Q");
      IdExprNode idExprNode0 = new IdExprNode("VAR", "'G#1m&X0,=F^Q");
      IdInit idInit0 = new IdInit(idExprNode0, idExprNode0, constExprNode0);
      VarDeclOp varDeclOp0 = new VarDeclOp("[8~lP<vn)n", idInit0);
      Integer integer0 = new Integer(44);
      idExprNode0.setType(integer0);
      ArrayList<IdInit> arrayList0 = varDeclOp0.getIdInitList();
      CVisitor cVisitor0 = new CVisitor();
      ReadOp readOp0 = new ReadOp("0-R0R <^$RW ", arrayList0, constExprNode0);
      Object object0 = readOp0.accept(cVisitor0);
      assertEquals("printf(\"'G#1m&X0,=F^Q\");\nscanf(\"%f\",&'G#1m&X0,=F^Q);\n", object0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      CVisitor cVisitor0 = new CVisitor();
      IdExprNode idExprNode0 = new IdExprNode("zH?p]Jr7?.<4", "zH?p]Jr7?.<4");
      ConstExprNode constExprNode0 = new ConstExprNode("zH?p]Jr7?.<4", "zH?p]Jr7?.<4");
      ArrayList<IdInit> arrayList0 = new ArrayList<IdInit>();
      IdInit idInit0 = new IdInit(idExprNode0, constExprNode0, constExprNode0);
      arrayList0.add(idInit0);
      ReadOp readOp0 = new ReadOp("zH?p]Jr7?.<4", arrayList0, constExprNode0);
      // Undeclared exception!
      try { 
        cVisitor0.visitReadOp(readOp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("visitors.CVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      CVisitor cVisitor0 = new CVisitor();
      ArrayList<IdInit> arrayList0 = new ArrayList<IdInit>();
      ReadOp readOp0 = new ReadOp("@<", arrayList0, (ConstExprNode) null);
      String string0 = cVisitor0.visit(readOp0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      CVisitor cVisitor0 = new CVisitor();
      ArrayList<IdInit> arrayList0 = new ArrayList<IdInit>();
      ArrayList<ExprNode> arrayList1 = new ArrayList<ExprNode>();
      AssignOp assignOp0 = new AssignOp("Wv'", arrayList0, arrayList1);
      arrayList1.add((ExprNode) assignOp0);
      IdExprNode idExprNode0 = new IdExprNode("p]nnqX+^.9EUP", "xU[)eI< ");
      ConstExprNode constExprNode0 = new ConstExprNode("xU[)eI< ", "-jn>^");
      IdInit idInit0 = new IdInit(idExprNode0, assignOp0, constExprNode0);
      arrayList0.add(idInit0);
      // Undeclared exception!
      try { 
        cVisitor0.visit(assignOp0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Variabile o funzione xU[)eI<  non dichiarata!
         //
         verifyException("visitors.CVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      CVisitor cVisitor0 = new CVisitor();
      ArrayList<IdInit> arrayList0 = new ArrayList<IdInit>();
      ArrayList<ExprNode> arrayList1 = new ArrayList<ExprNode>();
      AssignOp assignOp0 = new AssignOp("@j<_ixNJg-G", arrayList0, arrayList1);
      arrayList1.add((ExprNode) assignOp0);
      String string0 = cVisitor0.visit(assignOp0);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      CVisitor cVisitor0 = new CVisitor();
      ConstExprNode constExprNode0 = new ConstExprNode("i[JL,Va4?;t.R", "i[JL,Va4?;t.R");
      CallParamOp callParamOp0 = new CallParamOp(constExprNode0, true);
      String string0 = cVisitor0.visit(callParamOp0);
      assertEquals("&i[JL,Va4?;t.R", string0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ArrayList<VarDeclOp> arrayList0 = new ArrayList<VarDeclOp>();
      ArrayList<StatOp> arrayList1 = new ArrayList<StatOp>();
      BodyOp bodyOp0 = new BodyOp(arrayList0, arrayList1);
      arrayList1.add((StatOp) null);
      CVisitor cVisitor0 = new CVisitor();
      cVisitor0.visit(bodyOp0);
      assertEquals(1, arrayList1.size());
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      CVisitor cVisitor0 = new CVisitor();
      ConstExprNode constExprNode0 = new ConstExprNode("zH?p]Jr7?.<4", "zH?p]Jr7?.<4");
      ArrayList<StatOp> arrayList0 = new ArrayList<StatOp>();
      IdInit idInit0 = new IdInit((IdExprNode) null, (ExprNode) null, constExprNode0);
      VarDeclOp varDeclOp0 = new VarDeclOp("\"%c\"", idInit0);
      BodyOp bodyOp0 = new BodyOp(varDeclOp0, arrayList0);
      IfStatOp ifStatOp0 = new IfStatOp("\"%c\"", constExprNode0, bodyOp0, bodyOp0);
      // Undeclared exception!
      try { 
        cVisitor0.visit(ifStatOp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("visitors.CVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      CVisitor cVisitor0 = new CVisitor();
      ArrayList<IdInit> arrayList0 = new ArrayList<IdInit>();
      ParDeclOp parDeclOp0 = new ParDeclOp("i[JL,Va4?;t.R", "i[JL,Va4?;t.R", arrayList0);
      Object object0 = parDeclOp0.accept(cVisitor0);
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      ArrayList<IdInit> arrayList0 = new ArrayList<IdInit>();
      CVisitor cVisitor0 = new CVisitor();
      IdExprNode idExprNode0 = new IdExprNode((String) null, ";<gDVp5Ox@,[pc");
      VarDeclOp varDeclOp0 = new VarDeclOp(":ilUZg1zS,%N", arrayList0);
      ArrayList<StatOp> arrayList1 = new ArrayList<StatOp>();
      BodyOp bodyOp0 = new BodyOp(varDeclOp0, arrayList1);
      FunOp funOp0 = new FunOp(idExprNode0, (ArrayList<ParDeclOp>) null, "sL7N1t)*+28xRXul&Q", bodyOp0);
      IsMainFunOp isMainFunOp0 = new IsMainFunOp(true, funOp0);
      String string0 = cVisitor0.visit(isMainFunOp0);
      assertEquals("// MAIN FUNCTION\nint main(int argc, char** argv){\n;<gDVp5Ox@,[pc();\nreturn (EXIT_SUCCESS);\n}\nERROR ;<gDVp5Ox@,[pc(){\n}\n", string0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      ArrayList<IdInit> arrayList0 = new ArrayList<IdInit>();
      IdExprNode idExprNode0 = new IdExprNode((String) null, "\nSYMBOL:");
      CVisitor cVisitor0 = new CVisitor();
      ArrayList<ParDeclOp> arrayList1 = new ArrayList<ParDeclOp>();
      VarDeclOp varDeclOp0 = new VarDeclOp("sL7N1t)*+28xRXul&Q", arrayList0);
      ArrayList<StatOp> arrayList2 = new ArrayList<StatOp>();
      BodyOp bodyOp0 = new BodyOp(varDeclOp0, arrayList2);
      FunOp funOp0 = new FunOp(idExprNode0, arrayList1, (String) null, bodyOp0);
      IsMainFunOp isMainFunOp0 = new IsMainFunOp(true, funOp0);
      // Undeclared exception!
      try { 
        cVisitor0.visit(isMainFunOp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("visitors.CVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      CVisitor cVisitor0 = new CVisitor();
      ArrayList<IdInit> arrayList0 = new ArrayList<IdInit>();
      IdExprNode idExprNode0 = new IdExprNode("@j<`_iax2g-+G", "MINUS");
      ArrayList<ParDeclOp> arrayList1 = new ArrayList<ParDeclOp>();
      VarDeclOp varDeclOp0 = new VarDeclOp("@j<`_iax2g-+G", arrayList0);
      ArrayList<StatOp> arrayList2 = new ArrayList<StatOp>();
      BodyOp bodyOp0 = new BodyOp(varDeclOp0, arrayList2);
      FunOp funOp0 = new FunOp(idExprNode0, arrayList1, "M}qE/'mxH(INTje]", bodyOp0);
      IsMainFunOp isMainFunOp0 = new IsMainFunOp(false, funOp0);
      String string0 = cVisitor0.visit(isMainFunOp0);
      assertEquals("ERROR MINUS){\n}\n", string0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ConstExprNode constExprNode0 = new ConstExprNode(". Per dichiarare una concatenazioni di stringhe costanti utilizza il tipo var al posto di string", ". Per dichiarare una concatenazioni di stringhe costanti utilizza il tipo var al posto di string");
      IdExprNode idExprNode0 = new IdExprNode("STRING", "R,/\"}D6_%");
      IdInit idInit0 = new IdInit(idExprNode0, idExprNode0, constExprNode0);
      VarDeclOp varDeclOp0 = new VarDeclOp("STRING", idInit0);
      Integer integer0 = new Integer(2440);
      idExprNode0.setType(integer0);
      ArrayList<VarDeclOp> arrayList0 = new ArrayList<VarDeclOp>();
      ArrayList<StatOp> arrayList1 = new ArrayList<StatOp>();
      BodyOp bodyOp0 = new BodyOp(arrayList0, arrayList1);
      BodyOp bodyOp1 = new BodyOp(varDeclOp0, arrayList1);
      CVisitor cVisitor0 = new CVisitor();
      IfStatOp ifStatOp0 = new IfStatOp("R,/\"}D6_%", constExprNode0, bodyOp0, bodyOp1);
      // Undeclared exception!
      try { 
        cVisitor0.visit(ifStatOp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("visitors.CVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      ArrayList<IdInit> arrayList0 = new ArrayList<IdInit>();
      ArrayList<StatOp> arrayList1 = new ArrayList<StatOp>();
      VarDeclOp varDeclOp0 = new VarDeclOp("'G#1m&X0,=F^Q", arrayList0);
      CVisitor cVisitor0 = new CVisitor();
      BodyOp bodyOp0 = new BodyOp(varDeclOp0, arrayList1);
      ArrayList<AbstractSyntaxNode> arrayList2 = new ArrayList<AbstractSyntaxNode>();
      IdExprNode idExprNode0 = new IdExprNode("'G#1m&X0,=F^Q", "'G#1m&X0,=F^Q");
      ArrayList<ParDeclOp> arrayList3 = new ArrayList<ParDeclOp>();
      FunOp funOp0 = new FunOp(idExprNode0, arrayList3, "TK", bodyOp0);
      IsMainFunOp isMainFunOp0 = new IsMainFunOp(false, funOp0);
      ProgramOp programOp0 = new ProgramOp(arrayList2, isMainFunOp0, arrayList2);
      // Undeclared exception!
      try { 
        cVisitor0.visit(programOp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("visitors.CVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      ConstExprNode constExprNode0 = new ConstExprNode("ra", "ra");
      ArrayList<IdInit> arrayList0 = new ArrayList<IdInit>();
      ArrayList<StatOp> arrayList1 = new ArrayList<StatOp>();
      VarDeclOp varDeclOp0 = new VarDeclOp("ra", arrayList0);
      BodyOp bodyOp0 = new BodyOp(varDeclOp0, arrayList1);
      CVisitor cVisitor0 = new CVisitor();
      WhileOp whileOp0 = new WhileOp("4H,p6=p%f6fYh3WBS=", constExprNode0, bodyOp0);
      IfStatOp ifStatOp0 = new IfStatOp("ra", whileOp0, bodyOp0, bodyOp0);
      String string0 = cVisitor0.visit(ifStatOp0);
      assertEquals("if(while(ra){\n}\n){\n}\nelse{\n}\n", string0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      CVisitor cVisitor0 = new CVisitor();
      ArrayList<ExprNode> arrayList0 = new ArrayList<ExprNode>();
      WriteOp writeOp0 = new WriteOp("y>]C[^!@Oir", (String) null, arrayList0);
      ReturnStatOp returnStatOp0 = new ReturnStatOp((String) null, writeOp0);
      // Undeclared exception!
      try { 
        cVisitor0.visit(returnStatOp0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      CVisitor cVisitor0 = new CVisitor();
      ConstExprNode constExprNode0 = new ConstExprNode("", "");
      String string0 = cVisitor0.exprStringConverter(constExprNode0);
      assertEquals("\"\"", string0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      IdExprNode idExprNode0 = new IdExprNode("XmHoWll,RP1Az/", "XmHoWll,RP1Az/");
      CVisitor cVisitor0 = new CVisitor();
      // Undeclared exception!
      try { 
        cVisitor0.visit(idExprNode0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Variabile o funzione XmHoWll,RP1Az/ non dichiarata!
         //
         verifyException("visitors.CVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      CVisitor cVisitor0 = new CVisitor();
      String string0 = cVisitor0.visit((AbstractSyntaxNode) null);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      CVisitor cVisitor0 = new CVisitor();
      // Undeclared exception!
      try { 
        cVisitor0.visitWhileOp((AbstractSyntaxNode) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("visitors.CVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      CVisitor cVisitor0 = new CVisitor();
      TypeVisitor typeVisitor0 = new TypeVisitor();
      Stack<SymbolTable> stack0 = typeVisitor0.getActiveStackScope();
      cVisitor0.setActiveStackScope(stack0);
      assertTrue(stack0.empty());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      CVisitor cVisitor0 = new CVisitor();
      ExprNode exprNode0 = new ExprNode("Vo'");
      // Undeclared exception!
      try { 
        cVisitor0.visitReturnStatOp(exprNode0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // nodes.ExprNode cannot be cast to nodes.ReturnStatOp
         //
         verifyException("visitors.CVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      CVisitor cVisitor0 = new CVisitor();
      cVisitor0.setGlobalVarDecl(true);
  }
}
