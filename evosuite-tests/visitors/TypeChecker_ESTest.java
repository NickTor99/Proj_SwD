/*
 * This file was automatically generated by EvoSuite
 * Mon Jun 05 02:10:47 GMT 2023
 */

package visitors;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import visitors.TypeChecker;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class TypeChecker_ESTest extends TypeChecker_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      boolean boolean0 = TypeChecker.typeCompatibility(44, 60);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      boolean boolean0 = TypeChecker.typeCompatibility(740, (-995106591));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      boolean boolean0 = TypeChecker.typeCompatibility((-1), 2511262);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeChecker.AssignOpChecker(8, 66658563);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Non \u00E8 possibile assegnare il tipo 66658563 al tipo 8
         //
         verifyException("visitors.TypeChecker", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeChecker.AssignOpChecker(43, (-1577));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Non \u00E8 possibile assegnare il tipo -1577 al tipo 43
         //
         verifyException("visitors.TypeChecker", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeChecker.AssignOpChecker(7, (-2259));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Non \u00E8 possibile assegnare il tipo -2259 al tipo 7
         //
         verifyException("visitors.TypeChecker", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeChecker.AssignOpChecker(6, (-1618932450));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Non \u00E8 possibile assegnare il tipo -1618932450 al tipo 6
         //
         verifyException("visitors.TypeChecker", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeChecker.AssignOpChecker((-122), (-122));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Non \u00E8 possibile assegnare il tipo -122 al tipo -122
         //
         verifyException("visitors.TypeChecker", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeChecker.AssignOpChecker(44, 1349);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Non \u00E8 possibile assegnare il tipo 1349 al tipo 44
         //
         verifyException("visitors.TypeChecker", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeChecker.AssignOpChecker(2147483645, 2321);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Non \u00E8 possibile assegnare il tipo 2321 al tipo 2147483645
         //
         verifyException("visitors.TypeChecker", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeChecker.unaryOpChecker("BOOLEANOP", 876);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Operazione BOOLEANOP non verificabile 
         //
         verifyException("visitors.TypeChecker", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeChecker.unaryOpChecker("UMINUSOP", 2044650);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Operazione UMINUSOP non verificabile 
         //
         verifyException("visitors.TypeChecker", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeChecker.binaryOpChecker("DIV", 44, 4270);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Il tipo 44 e il tipo 4270 sono incompatibili
         //
         verifyException("visitors.TypeChecker", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeChecker.binaryOpChecker("DIV", 180, 7);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Il tipo 180 e il tipo 7 sono incompatibili
         //
         verifyException("visitors.TypeChecker", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeChecker.binaryOpChecker("DIV", 43, 330);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Il tipo 43 e il tipo 330 sono incompatibili
         //
         verifyException("visitors.TypeChecker", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeChecker.binaryOpChecker("ARITMETIC", 44, (-2345));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Il tipo 44 e il tipo -2345 sono incompatibili
         //
         verifyException("visitors.TypeChecker", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeChecker.binaryOpChecker("ARITMETIC", 2358, 1362);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Il tipo 2358 e il tipo 1362 sono incompatibili
         //
         verifyException("visitors.TypeChecker", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeChecker.binaryOpChecker("ARITMETIC", 43, (-2378));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Il tipo 43 e il tipo -2378 sono incompatibili
         //
         verifyException("visitors.TypeChecker", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeChecker.binaryOpChecker("ARITMETIC", 10, 10);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Il tipo 10 e il tipo 10 sono incompatibili
         //
         verifyException("visitors.TypeChecker", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeChecker.unaryOpChecker((String) null, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeChecker.getInferenceType((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("visitors.TypeChecker", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeChecker.binaryOpChecker((String) null, 2147483645, 2147483645);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      boolean boolean0 = TypeChecker.typeCompatibility(44, 43);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      boolean boolean0 = TypeChecker.typeCompatibility(44, 0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      boolean boolean0 = TypeChecker.typeCompatibility(0, 0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      int int0 = TypeChecker.AssignOpChecker(8, 8);
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeChecker.AssignOpChecker(8, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Non \u00E8 possibile assegnare il tipo 0 al tipo 8
         //
         verifyException("visitors.TypeChecker", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeChecker.AssignOpChecker(43, 3195);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Non \u00E8 possibile assegnare il tipo 3195 al tipo 43
         //
         verifyException("visitors.TypeChecker", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      int int0 = TypeChecker.AssignOpChecker(7, 7);
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeChecker.AssignOpChecker(7, 44);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Non \u00E8 possibile assegnare il tipo 44 al tipo 7
         //
         verifyException("visitors.TypeChecker", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeChecker.AssignOpChecker(6, 43);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Non \u00E8 possibile assegnare il tipo 43 al tipo 6
         //
         verifyException("visitors.TypeChecker", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      int int0 = TypeChecker.AssignOpChecker(6, 6);
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      int int0 = TypeChecker.AssignOpChecker(44, 44);
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      int int0 = TypeChecker.AssignOpChecker(43, 7);
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int int0 = TypeChecker.AssignOpChecker(43, 43);
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = TypeChecker.AssignOpChecker(43, 44);
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeChecker.AssignOpChecker(44, 1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Non \u00E8 possibile assegnare il tipo 1 al tipo 44
         //
         verifyException("visitors.TypeChecker", e);
      }
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeChecker.unaryOpChecker("BOOLEANOP", (-1));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Operazione BOOLEANOP non verificabile 
         //
         verifyException("visitors.TypeChecker", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      int int0 = TypeChecker.unaryOpChecker("BOOLEANOP", 7);
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeChecker.unaryOpChecker("UMINUSOP", (-1838656495));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Operazione UMINUSOP non verificabile 
         //
         verifyException("visitors.TypeChecker", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      int int0 = TypeChecker.unaryOpChecker("UMINUSOP", 44);
      assertEquals(44, int0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      int int0 = TypeChecker.unaryOpChecker("UMINUSOP", 43);
      assertEquals(43, int0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeChecker.unaryOpChecker("?", 43);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Operazione ? non verificabile 
         //
         verifyException("visitors.TypeChecker", e);
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeChecker.binaryOpChecker("POW", 44, (-1689));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Il tipo 44 e il tipo -1689 sono incompatibili
         //
         verifyException("visitors.TypeChecker", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeChecker.binaryOpChecker("POW", 43, (-223));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Il tipo 43 e il tipo -223 sono incompatibili
         //
         verifyException("visitors.TypeChecker", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      int int0 = TypeChecker.binaryOpChecker("POW", 43, 43);
      assertEquals(44, int0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      int int0 = TypeChecker.binaryOpChecker("POW", 44, 44);
      assertEquals(44, int0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeChecker.binaryOpChecker("CWCfi<k6", 44, (-2080488296));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Operazione non consentita
         //
         verifyException("visitors.TypeChecker", e);
      }
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      int int0 = TypeChecker.binaryOpChecker("BOOLEANOP", 7, 7);
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeChecker.binaryOpChecker("BOOLEANOP", 7, (-1));
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Operazione non consentita
         //
         verifyException("visitors.TypeChecker", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeChecker.binaryOpChecker("BOOLEANOP", 0, 1870);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // Operazione non consentita
         //
         verifyException("visitors.TypeChecker", e);
      }
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeChecker.binaryOpChecker("RELOP", 8, 5);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Il tipo 8 e il tipo 5 sono incompatibili
         //
         verifyException("visitors.TypeChecker", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      int int0 = TypeChecker.binaryOpChecker("RELOP", 8, 8);
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeChecker.binaryOpChecker("RELOP", 6, 295);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Il tipo 6 e il tipo 295 sono incompatibili
         //
         verifyException("visitors.TypeChecker", e);
      }
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      int int0 = TypeChecker.binaryOpChecker("RELOP", 44, 44);
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeChecker.binaryOpChecker("RELOP", 44, (-1446));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Il tipo 44 e il tipo -1446 sono incompatibili
         //
         verifyException("visitors.TypeChecker", e);
      }
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeChecker.binaryOpChecker("RELOP", 43, 1908);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Il tipo 43 e il tipo 1908 sono incompatibili
         //
         verifyException("visitors.TypeChecker", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      int int0 = TypeChecker.binaryOpChecker("RELOP", 43, 44);
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      int int0 = TypeChecker.binaryOpChecker("RELOP", 6, 6);
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      int int0 = TypeChecker.binaryOpChecker("POW", 43, 44);
      assertEquals(44, int0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeChecker.binaryOpChecker("CONCAT", 9, 9);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Il tipo 9 e il tipo 9 sono incompatibili
         //
         verifyException("visitors.TypeChecker", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      int int0 = TypeChecker.binaryOpChecker("CONCAT", 1362, 1362);
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeChecker.binaryOpChecker("DIV", 44, 19);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Il tipo 44 e il tipo 19 sono incompatibili
         //
         verifyException("visitors.TypeChecker", e);
      }
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      int int0 = TypeChecker.binaryOpChecker("DIV", 44, 43);
      assertEquals(44, int0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      int int0 = TypeChecker.binaryOpChecker("DIV", 44, 44);
      assertEquals(44, int0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      int int0 = TypeChecker.binaryOpChecker("DIV", 43, 43);
      assertEquals(44, int0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeChecker.binaryOpChecker("DIV", (-5440), 1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Il tipo -5440 e il tipo 1 sono incompatibili
         //
         verifyException("visitors.TypeChecker", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      int int0 = TypeChecker.binaryOpChecker("RELOP", 43, 43);
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeChecker.binaryOpChecker("ARITMETIC", 44, 1173);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Il tipo 44 e il tipo 1173 sono incompatibili
         //
         verifyException("visitors.TypeChecker", e);
      }
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      int int0 = TypeChecker.binaryOpChecker("ARITMETIC", 44, 44);
      assertEquals(44, int0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      int int0 = TypeChecker.binaryOpChecker("ARITMETIC", 43, 43);
      assertEquals(43, int0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeChecker.binaryOpChecker("ARITMETIC", 43, 241);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Il tipo 43 e il tipo 241 sono incompatibili
         //
         verifyException("visitors.TypeChecker", e);
      }
  }

  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      int int0 = TypeChecker.binaryOpChecker("ARITMETIC", 44, 43);
      assertEquals(44, int0);
  }

  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      // Undeclared exception!
      try { 
        TypeChecker.binaryOpChecker("DIV", 43, 1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Il tipo 43 e il tipo 1 sono incompatibili
         //
         verifyException("visitors.TypeChecker", e);
      }
  }

  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      int int0 = TypeChecker.getInferenceType("FALSE");
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      int int0 = TypeChecker.getInferenceType("VOID");
      assertEquals(9, int0);
  }

  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      int int0 = TypeChecker.getInferenceType("TRUE");
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      int int0 = TypeChecker.getInferenceType("REAL");
      assertEquals(44, int0);
  }

  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      int int0 = TypeChecker.getInferenceType("CHAR");
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      int int0 = TypeChecker.getInferenceType("BOOL");
      assertEquals(7, int0);
  }

  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      int int0 = TypeChecker.getInferenceType("REAL_CONST");
      assertEquals(44, int0);
  }

  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      int int0 = TypeChecker.getInferenceType("STRING_CONST");
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      int int0 = TypeChecker.getInferenceType("INTEGER_CONST");
      assertEquals(43, int0);
  }

  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      int int0 = TypeChecker.getInferenceType("INTEGER");
      assertEquals(43, int0);
  }

  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      int int0 = TypeChecker.getInferenceType("CHAR_CONST");
      assertEquals(8, int0);
  }

  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      int int0 = TypeChecker.getInferenceType("UMINUSOP");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      int int0 = TypeChecker.getInferenceType("STRING");
      assertEquals(6, int0);
  }

  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      TypeChecker typeChecker0 = new TypeChecker();
  }
}
